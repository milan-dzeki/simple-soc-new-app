{"version":3,"file":"static/js/656.d10f6891.chunk.js","mappings":"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","sources":["webpack://frontend/./src/styles/components/shared/pageContainer.module.scss?24e2","webpack://frontend/./src/styles/components/shared/pageTitle.module.scss?3300","components/Shared/PageTitle.tsx","components/Shared/PageContainer.tsx","axios/axiosSettngs.ts","webpack://frontend/./src/styles/components/settingsPage/settingsBox.module.scss?d3a3","webpack://frontend/./src/styles/components/settingsPage/singleSetting.module.scss?0909","webpack://frontend/./src/styles/components/settingsPage/settingsSelectInput.module.scss?7946","components/SettingsPage/SettingSelectInput.tsx","components/SettingsPage/SingleSetting.tsx","utils/settingsPage/formatSettingName.ts","components/SettingsPage/SettingsBox.tsx","utils/settingsPage/formatSettingsTitles.ts","webpack://frontend/./src/styles/components/settingsPage/blockedPeopleBox.module.scss?3d62","webpack://frontend/./src/styles/components/settingsPage/singlePersonBlocked.module.scss?0c2c","components/SettingsPage/SinglePersonBlocked.tsx","components/SettingsPage/BlockedPeopleBox.tsx","config/settingsPage/settingsOptions.ts","utils/settingsPage/formatSettingOption.ts","webpack://frontend/./src/styles/components/settingsPage/accountDeactivationBox.module.scss?44fb","components/SettingsPage/AccountDeactivationBox.tsx","pages/SettingsPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"pageContainer_container__JU78m\",\"container__flex\":\"pageContainer_container__flex__mQNaW\",\"container__data\":\"pageContainer_container__data__70LWJ\",\"big\":\"pageContainer_big__iMyUq\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"pageTitle_title__Di7Rk\",\"title__text\":\"pageTitle_title__text__jkIUE\",\"title__underline\":\"pageTitle_title__underline__A2NOq\"};","import { FC } from 'react';\r\nimport styles from '../../styles/components/shared/pageTitle.module.scss';\r\n\r\ninterface Props {\r\n  titleText: string;\r\n  textAlign: \"title__center\" | \"title__left\";\r\n}\r\n\r\nconst PageTitle: FC<Props> = (props) => {\r\n  return (\r\n    <div className={`${styles.title} ${styles[props.textAlign]}`}>\r\n      <h1 className={styles.title__text}>\r\n        {props.titleText}\r\n      </h1>\r\n      <div className={styles.title__underline}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageTitle;","import { FC } from 'react';\r\nimport styles from '../../styles/components/shared/pageContainer.module.scss';\r\nimport PageTitle from './PageTitle';\r\n\r\ninterface Props {\r\n  loading: boolean;\r\n  width: \"medium\" | \"big\";\r\n  display: \"container__block\" | \"container__flex\";\r\n  children: React.ReactNode;\r\n  hasPageTitle: boolean;\r\n  titleText?: string;\r\n  titleTextAlign?: \"title__center\" | \"title__left\";\r\n}\r\n\r\nconst PageContainer: FC<Props> = (props) => {\r\n  return (\r\n    <main className={`${styles.container} ${styles[props.display]} ${styles[props.width]}`}>\r\n      {props.hasPageTitle && props.titleText && props.titleTextAlign && (\r\n        <PageTitle\r\n          titleText={props.titleText}\r\n          textAlign={props.titleTextAlign} />\r\n      )}\r\n      <section className={styles.container__data}>\r\n        {props.children}\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default PageContainer;","import axios from 'axios';\r\nimport baseUrl from './baseUrl';\r\n\r\nconst axiosSettings = axios.create({\r\n  baseURL: `${baseUrl}/settings`\r\n});\r\n\r\nexport default axiosSettings;","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"settingsBox_box__yPoep\",\"box__title\":\"settingsBox_box__title__HCctz\",\"box__data\":\"settingsBox_box__data__76seS\"};","// extracted by mini-css-extract-plugin\nexport default {\"setting\":\"singleSetting_setting__mJYRx\",\"setting__name\":\"singleSetting_setting__name__1sf2f\"};","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"settingsSelectInput_input__8Tf+-\",\"input__icon\":\"settingsSelectInput_input__icon__5ZiZ2\",\"input__input\":\"settingsSelectInput_input__input__5lCmW\",\"input__options\":\"settingsSelectInput_input__options__J2V5B\",\"input__opt\":\"settingsSelectInput_input__opt__B5-gC\"};","import { FC } from 'react';\r\nimport { ISettingOption, ISettingValue } from '../../types/settingsPage/settingsTypes';\r\nimport Backdrop from '../Shared/Backdrop';\r\nimport styles from '../../styles/components/settingsPage/settingsSelectInput.module.scss'; \r\n\r\ninterface Props {\r\n  show: boolean;\r\n  options: ISettingOption[];\r\n  value: string;\r\n  onShowSettingsOptions: () => void;\r\n  onHideSettingsOptions: () => void;\r\n  onEditSetting: (settingValue: ISettingValue) => Promise<void>;\r\n}\r\n\r\nconst SettingSelectInput: FC<Props> = (props) => {\r\n  return (\r\n    <div className={styles.input}>\r\n      <div className={styles.input__input} onClick={props.onShowSettingsOptions}>\r\n        <input \r\n          type=\"text\"\r\n          readOnly\r\n          value={props.value} />\r\n        <div className={styles.input__icon}>\r\n          <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 1024 1024\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\"></path></svg>\r\n        </div>\r\n      </div>\r\n      \r\n      \r\n      {\r\n        props.show && (\r\n          <>\r\n            <Backdrop show={props.show} bcgColor=\"transparent\" onClose={props.onHideSettingsOptions} />\r\n            <div className={styles.input__options}>\r\n              {props.options.map(opt => {\r\n                return (\r\n                  <p key={opt.dbValue} className={styles.input__opt} onClick={() => props.onEditSetting(opt.dbValue)}>\r\n                    {opt.usedValue}\r\n                  </p>\r\n                )\r\n              })}\r\n            </div>\r\n          </>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingSelectInput;","import { FC, memo } from 'react';\r\nimport styles from '../../styles/components/settingsPage/singleSetting.module.scss';\r\n// types\r\nimport { ISettingName, ISettingOption, ISettingValue } from '../../types/settingsPage/settingsTypes';\r\n// components\r\nimport SettingSelectInput from './SettingSelectInput';\r\n// utils\r\nimport { formatSettingName } from '../../utils/settingsPage/formatSettingName';\r\n\r\ninterface Props {\r\n  settingKey: ISettingName | string;\r\n  settingValue: string;\r\n  optionsShow: boolean;\r\n  settingOptions: ISettingOption[];\r\n  onShowSettingsOptions: () => void;\r\n  onHideSettingsOptions: () => void;\r\n  onEditSetting: (settingValue: ISettingValue) => Promise<void>;\r\n}\r\n\r\nconst SingleSetting: FC<Props> = (props) => {\r\n  return (\r\n    <div className={styles.setting}>\r\n      <p className={styles.setting__name}>\r\n        {formatSettingName(props.settingKey)}\r\n      </p>\r\n      <SettingSelectInput\r\n        show={props.optionsShow}\r\n        value={props.settingValue}\r\n        options={props.settingOptions}\r\n        onShowSettingsOptions={props.onShowSettingsOptions}\r\n        onHideSettingsOptions={props.onHideSettingsOptions}\r\n        onEditSetting={props.onEditSetting} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(SingleSetting);","import { ISettingName } from \"../../types/settingsPage/settingsTypes\";\r\n\r\nexport const formatSettingName = (name: ISettingName | string): string => {\r\n  if(name === \"whoCanAddMe\") return \"Who can add send me friend request\";\r\n  if(name === \"whoCanMessageMe\") return \"Who can message me\";\r\n  if(name === \"whoCanCommentMyPhotos\") return \"Who can comment my photos\";\r\n  if(name === \"whoCanCommentMyPosts\") return \"Who can comment my posts\";\r\n  if(name === \"whoCanLikeMyPhotos\") return \"Who can like my photos\";\r\n  if(name === \"whoCanLikeMyPosts\") return \"Who can like my posts\";\r\n  if(name === \"whoCanSeeMyFriendsList\") return \"Who can see my friend list\";\r\n  if(name === \"whoCanSeeMyPhotos\") return \"Who can see my photos\";\r\n  if(name === \"whoCanSeeMyPosts\") return \"Who can see my posts\";\r\n  if(name === \"whoCanSeeMyProfileInfo\") return \"Who can see my profile info\";\r\n  return name;\r\n};","import { FC } from 'react';\r\nimport styles from '../../styles/components/settingsPage/settingsBox.module.scss';\r\nimport { ISettingsBox, ISettingValue } from '../../types/settingsPage/settingsTypes';\r\nimport SingleSetting from './SingleSetting';\r\nimport { formaSettingsTitles } from '../../utils/settingsPage/formatSettingsTitles';\r\n\r\ninterface Props {\r\n  title: string;\r\n  settingsData: ISettingsBox;\r\n  onShowSettingsOptions: (settingsGroup: string, settingsName: string) => void;\r\n  onHideSettingsOptions: (settingsGroup: string, settingsName: string) => void;\r\n  onEditSetting: (settingGroup: string, settingName: string, settingValue: ISettingValue) => Promise<void>;\r\n}\r\n\r\nconst SettingsBox: FC<Props> = (props) => {\r\n  return (\r\n    <div className={styles.box}>\r\n      <h2 className={styles.box__title}>\r\n        {formaSettingsTitles(props.title)}\r\n      </h2>\r\n      <div className={styles.box__data}>\r\n        {\r\n          Object.keys(props.settingsData).length > 0\r\n          && Object.keys(props.settingsData).map(setting => {\r\n            return (\r\n              <SingleSetting\r\n                key={setting}\r\n                settingKey={setting}\r\n                optionsShow={props.settingsData[setting].optionsShow}\r\n                settingValue={props.settingsData[setting].currentValue}\r\n                settingOptions={props.settingsData[setting].options}\r\n                onShowSettingsOptions={() => props.onShowSettingsOptions(props.title, setting)}\r\n                onHideSettingsOptions={() => props.onHideSettingsOptions(props.title, setting)}\r\n                onEditSetting={(settingValue: ISettingValue) => props.onEditSetting(props.title, setting, settingValue)} />\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsBox;","export const formaSettingsTitles = (title: \"profileAccess\" | \"messaging\" | \"commentingAndLiking\" | \"friendRequests\" | string): string => {\r\n  if(title === \"profileAccess\") return \"Profile Access\";\r\n  if(title === \"messaging\") return \"Messaging\";\r\n  if(title === \"commentingAndLiking\") return \"Commenting and Liking\";\r\n  if(title === 'friendRequests') return \"Friend Requests\";\r\n  return title;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"blockedPeopleBox_box__q8jyY\",\"box__title\":\"blockedPeopleBox_box__title__1Bghz\",\"box__data\":\"blockedPeopleBox_box__data__opbra\",\"box__empty\":\"blockedPeopleBox_box__empty__Tnn6Z\"};","// extracted by mini-css-extract-plugin\nexport default {\"blocked\":\"singlePersonBlocked_blocked__dJCc6\",\"blocked__img\":\"singlePersonBlocked_blocked__img__EQcdo\",\"blocked__info\":\"singlePersonBlocked_blocked__info__9hWGi\",\"blocked__name\":\"singlePersonBlocked_blocked__name__xuH-6\",\"blocked__btn\":\"singlePersonBlocked_blocked__btn__q9poH\"};","import { FC, memo } from 'react';\r\nimport styles from '../../styles/components/settingsPage/singlePersonBlocked.module.scss';\r\nimport noUserImg from '../../images/no-user.jpg';\r\n\r\ninterface Props {\r\n  user: {\r\n    _id: string;\r\n    fullName: string;\r\n    profilePhotoUrl: string;\r\n  };\r\n  onPrepareUnblockUser: (id: string, name: string) => void;\r\n}\r\n\r\nconst SinglePersonBlocked: FC<Props> = (props) => {\r\n  return (\r\n    <div className={styles.blocked}>\r\n      <div className={styles.blocked__img}>\r\n        <img src={props.user.profilePhotoUrl || noUserImg} alt=\"user\" />\r\n      </div>\r\n      <div className={styles.blocked__info}>\r\n        <p className={styles.blocked__name}>\r\n          {props.user.fullName}\r\n        </p>\r\n        <button\r\n          type=\"button\"\r\n          className={styles.blocked__btn}\r\n          onClick={() => props.onPrepareUnblockUser(props.user._id, props.user.fullName)}>\r\n          unblock\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(SinglePersonBlocked);","import { FC, memo, useCallback, useState } from 'react';\r\nimport styles from '../../styles/components/settingsPage/blockedPeopleBox.module.scss';\r\n// hooks\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport { useDispatch } from 'react-redux';\r\n// components\r\nimport SinglePersonBlocked from './SinglePersonBlocked';\r\nimport DefaultModal from '../Modals/DefaultModal';\r\nimport ModalBtn from '../Buttons/ModalBtn';\r\nimport { unblockUser } from '../../store/actions/authActions';\r\n\r\nconst BlockedPeopleBox: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { authUser } = useTypedSelector(state => state.auth);\r\n\r\n  const [unblockUserInfo, setUnblockUserInfo] = useState<{id: string | null; name: string | null}>({\r\n    id: null,\r\n    name: null\r\n  });\r\n\r\n  const onPrepareUnblockUser = useCallback((id: string, name: string): void => {\r\n    setUnblockUserInfo({\r\n      id,\r\n      name\r\n    });\r\n  }, []);\r\n\r\n  const onCancelUnblockUser = useCallback((): void => {\r\n    setUnblockUserInfo({\r\n      id: null,\r\n      name: null\r\n    });\r\n  }, []);\r\n\r\n  const onUnblockUser = useCallback((): void => {\r\n    if(unblockUserInfo.id) {\r\n      dispatch(unblockUser(unblockUserInfo.id));\r\n    }\r\n    onCancelUnblockUser();\r\n  }, [dispatch, unblockUserInfo.id, onCancelUnblockUser]);\r\n\r\n  return (\r\n    <>\r\n      {\r\n        unblockUserInfo.id !== null && unblockUserInfo.name !== null && (\r\n          <DefaultModal\r\n            show={unblockUserInfo.id !== null && unblockUserInfo.name !== null}\r\n            isErrorModal={false}\r\n            title=\"Preparing to unblock user\"\r\n            text={`Are you sure you want to unblock ${unblockUserInfo.name}?`}\r\n            onClose={onCancelUnblockUser}>\r\n            <ModalBtn\r\n              btnType=\"button\"\r\n              btnCustomType=\"btn__cancel\"\r\n              btnText=\"cancel\"\r\n              onClick={onCancelUnblockUser} />\r\n            <ModalBtn\r\n              btnType=\"button\"\r\n              btnCustomType=\"btn__confirm\"\r\n              btnText=\"unblock\"\r\n              onClick={onUnblockUser} />\r\n          </DefaultModal>\r\n        )\r\n      }\r\n      <div className={styles.box}>\r\n        <h2 className={styles.box__title}>\r\n          People Blocked\r\n        </h2>\r\n        <div className={styles.box__data}>\r\n          {\r\n            !authUser || (authUser && authUser.blockList.length === 0)\r\n            ? <p className={styles.box__empty}>List is empty</p>\r\n            : authUser.blockList.map(person => {\r\n              return (\r\n                <SinglePersonBlocked\r\n                  key={person._id}\r\n                  user={person}\r\n                  onPrepareUnblockUser={onPrepareUnblockUser} />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(BlockedPeopleBox);","import { ISettingsPageState } from \"../../types/settingsPage/settingsTypes\";\r\n\r\nexport const settingsOptions: ISettingsPageState = {\r\n  commentingAndLiking: {\r\n    whoCanCommentMyPhotos: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    },\r\n    whoCanCommentMyPosts: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    },\r\n    whoCanLikeMyPhotos: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    },\r\n    whoCanLikeMyPosts: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  friendRequests: {\r\n    whoCanAddMe: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  messaging: {\r\n    whoCanMessageMe: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  profileAccess: {\r\n    whoCanSeeMyFriendsList: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    },\r\n    whoCanSeeMyPhotos: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    },\r\n    whoCanSeeMyPosts: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    },\r\n    whoCanSeeMyProfileInfo: {\r\n      currentValue: \"Everyone\",\r\n      optionsShow: false,\r\n      options: [\r\n        {\r\n          dbValue: \"everyone\",\r\n          usedValue: \"Everyone\"\r\n        },\r\n        {\r\n          dbValue: \"friendsOfFriends\",\r\n          usedValue: \"Friends of friends\"\r\n        },\r\n        {\r\n          dbValue: \"friends\",\r\n          usedValue: \"Friends only\"\r\n        },\r\n        {\r\n          dbValue: \"none\",\r\n          usedValue: \"No one\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n};","import { ICurrentOptionValue, ISettingValue } from \"../../types/settingsPage/settingsTypes\";\r\n\r\nexport const formatSettingOptionToDB = (value: ISettingValue): ICurrentOptionValue => {\r\n  if(value === \"everyone\") return \"Everyone\";\r\n  if(value === \"none\") return \"No one\";\r\n  if(value === \"friends\") return \"Friends only\";\r\n  if(value === \"friendsOfFriends\") return \"Friends of friends\";\r\n  return value;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"accountDeactivationBox_box__lKjsr\",\"box__title\":\"accountDeactivationBox_box__title__TxesE\",\"box__data\":\"accountDeactivationBox_box__data__T7U7N\",\"box__btn\":\"accountDeactivationBox_box__btn__x3IPq\",\"box__btn_icon\":\"accountDeactivationBox_box__btn_icon__vOomb\",\"box__btn_text\":\"accountDeactivationBox_box__btn_text__GlWdR\",\"box__btn_deact\":\"accountDeactivationBox_box__btn_deact__BOHLC\",\"box__btn_delete\":\"accountDeactivationBox_box__btn_delete__K7aac\"};","import { FC, memo } from 'react';\r\nimport styles from '../../styles/components/settingsPage/accountDeactivationBox.module.scss';\r\n\r\ninterface Props {\r\n  onPrepareAccountAction: (actionType: \"deactivateAccount\" | \"deleteAccount\", title: string, text: string, confirmBtnText: \"deactivate\" | \"delete\") => void;\r\n}\r\n\r\nconst AccountDeactivationBox: FC<Props> = (props) => {\r\n  return (\r\n    <div className={styles.box}>\r\n      <h2 className={styles.box__title}>\r\n        Account Deactivation / Deletion\r\n      </h2>\r\n      <div className={styles.box__data}>\r\n        <button\r\n          type=\"button\"\r\n          className={`${styles.box__btn} ${styles.box__btn_deact}`}\r\n          onClick={() => props.onPrepareAccountAction(\"deactivateAccount\", \"Account Deactivation\", \"Are you sure you want to deactivate account? After deactivating, to activate again, just log in regularly\", \"deactivate\")}>\r\n          <span className={styles.box__btn_icon}>\r\n            <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 16 16\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022l-.074.997zm2.004.45a7.003 7.003 0 0 0-.985-.299l.219-.976c.383.086.76.2 1.126.342l-.36.933zm1.37.71a7.01 7.01 0 0 0-.439-.27l.493-.87a8.025 8.025 0 0 1 .979.654l-.615.789a6.996 6.996 0 0 0-.418-.302zm1.834 1.79a6.99 6.99 0 0 0-.653-.796l.724-.69c.27.285.52.59.747.91l-.818.576zm.744 1.352a7.08 7.08 0 0 0-.214-.468l.893-.45a7.976 7.976 0 0 1 .45 1.088l-.95.313a7.023 7.023 0 0 0-.179-.483zm.53 2.507a6.991 6.991 0 0 0-.1-1.025l.985-.17c.067.386.106.778.116 1.17l-1 .025zm-.131 1.538c.033-.17.06-.339.081-.51l.993.123a7.957 7.957 0 0 1-.23 1.155l-.964-.267c.046-.165.086-.332.12-.501zm-.952 2.379c.184-.29.346-.594.486-.908l.914.405c-.16.36-.345.706-.555 1.038l-.845-.535zm-.964 1.205c.122-.122.239-.248.35-.378l.758.653a8.073 8.073 0 0 1-.401.432l-.707-.707z\"></path><path d=\"M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0v1z\"></path><path d=\"M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5z\"></path></svg>\r\n          </span>\r\n          <span className={styles.box__btn_text}>\r\n            Deactivate account\r\n          </span>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`${styles.box__btn} ${styles.box__btn_delete}`}\r\n          onClick={() => props.onPrepareAccountAction(\"deleteAccount\", \"Account Deletion\", \"Are you sure you want to delete your account? There is no going back after that.\", \"delete\")}>\r\n          <span className={styles.box__btn_icon}>\r\n            <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><g><path fill=\"none\" d=\"M0 0h24v24H0z\"></path><path d=\"M17 6h5v2h-2v13a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V8H2V6h5V3a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v3zm1 2H6v12h12V8zm-4.586 6l1.768 1.768-1.414 1.414L12 15.414l-1.768 1.768-1.414-1.414L10.586 14l-1.768-1.768 1.414-1.414L12 12.586l1.768-1.768 1.414 1.414L13.414 14zM9 4v2h6V4H9z\"></path></g></svg>\r\n          </span>\r\n          <span className={styles.box__btn_text}>\r\n            Delete account\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(AccountDeactivationBox);","import { FC, useState, useEffect, useCallback } from 'react';\r\nimport axiosSettings from '../axios/axiosSettngs';\r\nimport axiosUser from '../axios/axiosUser';\r\n// types\r\nimport { ISettingsResponseData, ISettingsPageState, ICurrentOptionValue, ISettingValue } from '../types/settingsPage/settingsTypes';\r\nimport { ISettingsPageModalState } from '../types/settingsPage/settingsPageModal';\r\n// hooks\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport { useDispatch } from 'react-redux';\r\n// components\r\nimport PageContainer from '../components/Shared/PageContainer';\r\nimport SettingsBox from '../components/SettingsPage/SettingsBox';\r\nimport Spinner from '../components/Shared/Spinner';\r\nimport DefaultModal from '../components/Modals/DefaultModal';\r\nimport BlockedPeopleBox from '../components/SettingsPage/BlockedPeopleBox';\r\n// utils\r\nimport { settingsOptions } from '../config/settingsPage/settingsOptions';\r\nimport { formatSettingOptionToDB } from '../utils/settingsPage/formatSettingOption';\r\nimport AccountDeactivationBox from '../components/SettingsPage/AccountDeactivationBox';\r\nimport ModalBtn from '../components/Buttons/ModalBtn';\r\n// redux\r\nimport { logout, deleteAccount } from '../store/actions/authActions';\r\nimport axiosAuth from '../axios/axiosAuth';\r\n\r\nconst SettingsPage: FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { authLoading } = useTypedSelector(state => state.auth);\r\n  const [settingsLoading, setSettingsLoading] = useState(false);\r\n  const [settingsError, setSettingsError] = useState<string | null>(null);\r\n  const [settings, setSettings] = useState<ISettingsPageState | null>(null);\r\n\r\n  const [modalInfo, setModalInfo] = useState<ISettingsPageModalState>({\r\n    show: false,\r\n    actionType: null,\r\n    title: \"\",\r\n    text: \"\",\r\n    confirmBtnText: null\r\n  });\r\n\r\n  const getSettings = async(): Promise<void> => {\r\n    const token = localStorage.getItem(\"socNetAppToken\");\r\n    setSettingsLoading(true);\r\n\r\n    try {\r\n      const { data } = await axiosSettings.get<ISettingsResponseData>(\"/\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      let valueToStore = {...settingsOptions};\r\n      for(const key in data.settings) {\r\n        for(const name in data.settings[key]) {\r\n          if(key in valueToStore && name in valueToStore[key]) {\r\n            valueToStore[key][name].currentValue = formatSettingOptionToDB(data.settings[key][name]) as ICurrentOptionValue;\r\n          }\r\n        }\r\n      }\r\n    \r\n      setSettings(valueToStore);\r\n    } catch(error) {\r\n      setSettingsError((error as any).response.data.message);\r\n    }\r\n\r\n    setSettingsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getSettings();\r\n  }, []);\r\n\r\n  const onEditSetting = useCallback(async(settingGroup: string, settingName: string, settingValue: ISettingValue): Promise<void> => {\r\n    const token = localStorage.getItem(\"socNetAppToken\");\r\n    setSettingsLoading(true);\r\n    \r\n    try {\r\n      await axiosSettings.patch(\"/\", {\r\n        settingGroup, settingName, settingValue\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      setSettings(prev => {\r\n        if(!prev) return prev;\r\n        return {\r\n          ...prev,\r\n          [settingGroup]: {\r\n            ...prev[settingGroup],\r\n            [settingName]: {\r\n              ...prev[settingGroup][settingName],\r\n              currentValue: formatSettingOptionToDB(settingValue),\r\n              optionsShow: false\r\n            }\r\n          }\r\n        };\r\n      });\r\n    } catch(error) {\r\n      setSettingsError((error as any).response.data.message);\r\n    }\r\n    setSettingsLoading(false);\r\n  }, []);\r\n\r\n  const onShowSettingsOptions = useCallback((settingsGroup: string, settingsName: string): void => {\r\n    setSettings(prev => {\r\n      if(!prev) return prev;\r\n      return {\r\n        ...prev,\r\n        [settingsGroup]: {\r\n          ...prev[settingsGroup],\r\n          [settingsName]: {\r\n            ...prev[settingsGroup][settingsName],\r\n            optionsShow: true\r\n          }\r\n        }\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  const onHideSettingsOptions = useCallback((settingsGroup: string, settingsName: string): void => {\r\n    setSettings(prev => {\r\n      if(!prev) return prev;\r\n      return {\r\n        ...prev,\r\n        [settingsGroup]: {\r\n          ...prev[settingsGroup],\r\n          [settingsName]: {\r\n            ...prev[settingsGroup][settingsName],\r\n            optionsShow: false\r\n          }\r\n        }\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  const onPrepareAccountAction = useCallback((actionType: \"deactivateAccount\" | \"deleteAccount\", title: string, text: string, confirmBtnText: \"deactivate\" | \"delete\"): void => {\r\n    setModalInfo({\r\n      show: true,\r\n      actionType,\r\n      title,\r\n      text,\r\n      confirmBtnText\r\n    });\r\n  }, []);\r\n\r\n  const onModalClose = (): void => {\r\n    setModalInfo({\r\n      show: false,\r\n      actionType: null,\r\n      title: \"\",\r\n      text: \"\",\r\n      confirmBtnText: null\r\n    });\r\n  };\r\n\r\n  const onDeactivateAccount = useCallback(async(): Promise<void> => {\r\n    setSettingsLoading(true);\r\n\r\n    if(modalInfo.actionType === \"deactivateAccount\") {\r\n      const token = localStorage.getItem(\"socNetAppToken\");\r\n      \r\n      try {\r\n        await axiosUser.post(\"/deactivate\", {}, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        dispatch(logout());\r\n      } catch(error) {\r\n        setSettingsError((error as any).response.data.message);\r\n      }\r\n    } \r\n    onModalClose();\r\n    setSettingsLoading(false);\r\n  }, [modalInfo.actionType, dispatch]);\r\n\r\n  const onDeleteAccount = async(): Promise<void> => {\r\n    setSettingsLoading(true);\r\n\r\n    if(modalInfo.actionType === \"deleteAccount\") {\r\n      const token = localStorage.getItem(\"socNetAppToken\");\r\n      try {\r\n        await axiosAuth.delete(\"/deleteAccount\", {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        dispatch(logout());\r\n      } catch(error) {\r\n        setSettingsError((error as any).response.data.message);\r\n      }\r\n    }\r\n    onModalClose();\r\n    setSettingsLoading(false);\r\n  };\r\n\r\n  if(authLoading || settingsLoading) return <Spinner />;\r\n\r\n  return (\r\n    <>\r\n      {modalInfo.show && modalInfo.actionType && modalInfo.confirmBtnText && (\r\n        <DefaultModal\r\n          show={modalInfo.show && modalInfo.actionType !== null && modalInfo.confirmBtnText !== null}\r\n          isErrorModal={false}\r\n          title={modalInfo.title}\r\n          text={modalInfo.text}\r\n          onClose={onModalClose}>\r\n          <ModalBtn\r\n            btnCustomType=\"btn__cancel\"\r\n            btnType=\"button\"\r\n            btnText=\"cancel\"\r\n            onClick={onModalClose} />\r\n          <ModalBtn\r\n            btnCustomType=\"btn__confirm\"\r\n            btnText={modalInfo.confirmBtnText}\r\n            btnType=\"button\"\r\n            onClick={\r\n              modalInfo.actionType === \"deactivateAccount\"\r\n              ? onDeactivateAccount\r\n              : onDeleteAccount\r\n            } />\r\n        </DefaultModal>\r\n      )}\r\n      <PageContainer\r\n        loading={settingsLoading}\r\n        display=\"container__block\"\r\n        hasPageTitle={true}\r\n        titleText=\"Settings\"\r\n        titleTextAlign=\"title__left\"\r\n        width=\"big\">\r\n        {\r\n          settingsLoading\r\n          ? <Spinner />\r\n          : !settingsLoading && settings\r\n          ? Object.keys(settings).map(setting => {\r\n            return (\r\n              <SettingsBox\r\n                key={setting}\r\n                title={setting}\r\n                settingsData={settings[setting]}\r\n                onShowSettingsOptions={onShowSettingsOptions}\r\n                onHideSettingsOptions={onHideSettingsOptions}\r\n                onEditSetting={onEditSetting} />\r\n            );\r\n          })\r\n          : null\r\n        }\r\n      {!settingsLoading && settings && (\r\n        <AccountDeactivationBox\r\n          onPrepareAccountAction={onPrepareAccountAction} />\r\n      )}\r\n      {!settingsLoading && settings && (\r\n        <BlockedPeopleBox />\r\n      )}\r\n      </PageContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;"],"names":["props","_jsxs","className","concat","styles","textAlign","children","_jsx","titleText","display","width","hasPageTitle","titleTextAlign","PageTitle","axios","baseURL","baseUrl","onClick","onShowSettingsOptions","type","readOnly","value","stroke","fill","strokeWidth","viewBox","height","xmlns","d","show","_Fragment","Backdrop","bcgColor","onClose","onHideSettingsOptions","options","map","opt","onEditSetting","dbValue","usedValue","SingleSetting","name","settingKey","SettingSelectInput","optionsShow","settingValue","settingOptions","memo","title","Object","keys","settingsData","length","setting","currentValue","SinglePersonBlocked","src","user","profilePhotoUrl","noUserImg","alt","fullName","onPrepareUnblockUser","_id","BlockedPeopleBox","dispatch","useDispatch","authUser","useTypedSelector","state","auth","_useState","useState","id","_useState2","_slicedToArray","unblockUserInfo","setUnblockUserInfo","useCallback","onCancelUnblockUser","onUnblockUser","unblockUser","DefaultModal","isErrorModal","text","ModalBtn","btnType","btnCustomType","btnText","blockList","person","settingsOptions","commentingAndLiking","whoCanCommentMyPhotos","whoCanCommentMyPosts","whoCanLikeMyPhotos","whoCanLikeMyPosts","friendRequests","whoCanAddMe","messaging","whoCanMessageMe","profileAccess","whoCanSeeMyFriendsList","whoCanSeeMyPhotos","whoCanSeeMyPosts","whoCanSeeMyProfileInfo","formatSettingOptionToDB","AccountDeactivationBox","onPrepareAccountAction","authLoading","settingsLoading","setSettingsLoading","_useState3","_useState4","setSettingsError","_useState5","_useState6","settings","setSettings","_useState7","actionType","confirmBtnText","_useState8","modalInfo","setModalInfo","getSettings","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","_yield$axiosSettings$","data","valueToStore","key","wrap","_context","prev","next","localStorage","getItem","axiosSettings","headers","Authorization","sent","_objectSpread","t0","response","message","stop","apply","arguments","useEffect","_ref2","_callee2","settingGroup","settingName","_context2","_defineProperty","_x","_x2","_x3","settingsGroup","settingsName","onModalClose","onDeactivateAccount","_callee3","_context3","axiosUser","logout","onDeleteAccount","_ref4","_callee4","_context4","axiosAuth","Spinner","PageContainer","loading","SettingsBox"],"sourceRoot":""}