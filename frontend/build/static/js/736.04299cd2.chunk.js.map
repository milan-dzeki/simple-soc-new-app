{"version":3,"file":"static/js/736.04299cd2.chunk.js","mappings":"2OAkOA,UAxN2B,WACzB,IAAQA,GAAWC,EAAAA,EAAAA,MAAXD,OAERE,GAgBIC,EAAAA,EAAAA,KAfFC,EAAYF,EAAZE,aACAC,EAAaH,EAAbG,cACAC,EAAcJ,EAAdI,eACAC,EAAKL,EAALK,MACAC,EAAiBN,EAAjBM,kBACAC,EAAUP,EAAVO,WACAC,EAAmBR,EAAnBQ,oBACAC,EAAkBT,EAAlBS,mBACAC,EAAYV,EAAZU,aACAC,EAAUX,EAAVW,WACAC,EAAYZ,EAAZY,aACAC,EAAeb,EAAfa,gBACAC,EAAmBd,EAAnBc,oBACAC,EAAiBf,EAAjBe,kBACAC,EAAmBhB,EAAnBgB,oBAGIC,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,UAAwB,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9DI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAEpCI,GAA4CL,EAAAA,EAAAA,UAAiF,CAC3HtB,OAAQ,KACR4B,OAAQ,GACRC,oBAAqB,IACrBC,GAAAN,EAAAA,EAAAA,GAAAG,EAAA,GAJKI,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAMxCG,GAAkDX,EAAAA,EAAAA,UAA4D,CAC5GtB,OAAQ,KACRkC,UAAW,OACXC,GAAAX,EAAAA,EAAAA,GAAAS,EAAA,GAHKG,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAK9CG,GAAwDhB,EAAAA,EAAAA,UAAwB,MAAKiB,GAAAf,EAAAA,EAAAA,GAAAc,EAAA,GAA9EE,EAAoBD,EAAA,GAAEE,EAAuBF,EAAA,IAEpDG,EAAAA,EAAAA,YAAU,WACLvB,EAASwB,OAASxB,EAASwB,MAAMT,WAClCO,EAAwBtB,EAASwB,MAAMT,UAE3C,GAAG,CAACf,EAASwB,SAEbD,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLE,OAAOC,QAAQC,aAAa,CAAC,EAAGC,SAASC,MAC3C,CACF,GAAG,KAEHN,EAAAA,EAAAA,YAAU,WACJ1C,EAGFS,EAAW,GAADwC,OAAIjD,IAFd0B,EAAgB,iBAIpB,GAAG,CAAC1B,EAAQS,IAEZ,IAAMyC,GAAoBC,EAAAA,EAAAA,cAAY,WACpCzB,EAAgB,KAClB,GAAG,IAEG0B,GAAgCD,EAAAA,EAAAA,cAAY,WAChDd,EAAqB,CACnBrC,OAAQ,KACRkC,UAAW,MAEf,GAAG,IAEGmB,GAA6BF,EAAAA,EAAAA,cAAY,SAACnD,EAAgBkC,GAC9DG,EAAqB,CACnBrC,OAAAA,EACAkC,UAAAA,GAEJ,GAAG,IAEGoB,GAAoBH,EAAAA,EAAAA,cAAWI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACjC1B,EAAkBpC,SAAUoC,EAAkBF,UAAS,CAAA0B,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAClD9C,EAAoBoB,EAAkBpC,OAAQoC,EAAkBF,WAAW,KAAD,EAChFkB,IAAgCQ,EAAAE,KAAA,eAEhCpC,EAAgB,qBAAqB,wBAAAkC,EAAAG,OAAA,GAAAL,EAAA,KAEtC,CAACtB,EAAkBF,UAAWE,EAAkBpC,OAAQoD,EAA+BpC,IAEpFgD,GAAwBb,EAAAA,EAAAA,cAAY,SAACnD,EAAgB4B,EAAsBC,GAC/E,IAAMoC,EAAYrC,EAAOsC,KAAI,SAAAC,GAAK,OAAIA,EAAMA,MAAMC,UAAU,IAC5DpC,EAAkB,CAChBhC,OAAAA,EACA4B,OAAQqC,EACRpC,oBAAAA,GAEJ,GAAG,IAUH,OACEwC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAC6B,OAA1BxC,EAAe/B,QAAmB+B,EAAeH,OAAO4C,OAAS,IAChEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CACdC,KAAgC,OAA1B5C,EAAe/B,QAAmB+B,EAAeH,OAAO4C,OAAS,EACvEI,QAbuB,WAC7B5C,EAAkB,CAChBhC,OAAQ,KACR4B,OAAQ,GACRC,oBAAqB,GAEzB,EAQQD,OAAQG,EAAeH,OACvBC,oBAAqBE,EAAeF,uBAErB,OAAjBJ,GAA2C,OAAlBpB,KACzBoE,EAAAA,EAAAA,KAACI,EAAAA,QAAY,CACXF,KAAuB,OAAjBlD,GAA2C,OAAlBpB,EAC/ByE,cAAc,EACd9B,MAAM,gBACN+B,KACEtD,IAA8BpB,GAAgC,iBAEhEuE,QACEnD,EACEyB,EACA7C,EACAG,EACA,WAAa,EAChB+D,UACDE,EAAAA,EAAAA,KAACO,EAAAA,EAAQ,CACPC,QAAQ,SACRC,cAAc,UACdC,QAAQ,KACRC,QACE3D,EACEyB,EACA7C,EACAG,EACA,WAAa,OAIS,OAA7B4B,EAAkBpC,QAAmD,OAAhCoC,EAAkBF,WAA0C,OAAnB5B,KAC/E+D,EAAAA,EAAAA,MAACQ,EAAAA,QAAY,CACXF,KAAqC,OAA7BvC,EAAkBpC,QAAmD,OAAhCoC,EAAkBF,WAA0C,OAAnB5B,EACtFwE,cAAc,EACd9B,MAAM,+BACN+B,KAAK,uDACLH,QAC+B,OAA7BxC,EAAkBpC,QAAmD,OAAhCoC,EAAkBF,UACrDkB,EACmB,OAAnB9C,EACAK,EACA,WAAa,EAChB4D,SAAA,EACDE,EAAAA,EAAAA,KAACO,EAAAA,EAAQ,CACPC,QAAQ,SACRC,cAAc,cACdC,QAAQ,SACRC,QAC+B,OAA7BhD,EAAkBpC,QAAmD,OAAhCoC,EAAkBF,UACrDkB,EACmB,OAAnB9C,EACAK,EACA,WAAa,KAEnB8D,EAAAA,EAAAA,KAACO,EAAAA,EAAQ,CACPC,QAAQ,SACRC,cAAc,eACdC,QAAQ,SACRC,QAC+B,OAA7BhD,EAAkBpC,QAAmD,OAAhCoC,EAAkBF,UACrDoB,EACmB,OAAnBhD,EACAM,EACA,WAAa,QAIvB6D,EAAAA,EAAAA,KAAA,QAAMY,MAAO,CAACC,OAAQ,UAAUf,SAE5BnE,GACEqE,EAAAA,EAAAA,KAACc,EAAAA,EAAO,IACE,OAAVhF,GAAmC,IAAjBA,EAAMiE,QACxBC,EAAAA,EAAAA,KAAA,KAAGY,MAAO,CAACG,UAAW,SAAUC,SAAU,QAAQlB,SAAC,mBAEnDE,EAAAA,EAAAA,KAACiB,EAAAA,EAAU,CACTC,KAAMpF,EAAM,GACZiC,qBAAsBA,EACtBzB,gBAAiBA,EACjBF,WAAYA,EACZC,aAAcA,EACdG,kBAAmBA,EACnBC,oBAAqBA,EACrBmC,2BAA4BA,EAC5B3C,oBAAqBA,EACrBsD,sBAAuBA,QAsBrC,C","sources":["pages/SinglePostPage.tsx"],"sourcesContent":["import { FC, useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport { usePosts } from '../hooks/usePostsHook/usePosts';\r\nimport { IPostPhoto } from '../hooks/usePostsHook/usePostsTypes';\r\nimport SinglePost from '../components/Posts/SinglePost';\r\nimport Spinner from '../components/Shared/Spinner';\r\nimport DefaultModal from '../components/Modals/DefaultModal';\r\nimport ModalBtn from '../components/Buttons/ModalBtn';\r\nimport PostPhotoSlider from '../components/Posts/PostPhotoSlider';\r\n\r\nconst SinglePostPage: FC = () => {\r\n  const { postId } = useParams();\r\n\r\n  const {\r\n    postsLoading,\r\n    postsErrorMsg,\r\n    postToDeleteId,\r\n    posts,\r\n    onClearPostsError,\r\n    onGetPosts,\r\n    onPrepareDeletePost,\r\n    onCancelDeletePost,\r\n    onDeletePost,\r\n    onLikePost,\r\n    onUnlikePost,\r\n    onCommentOnPost,\r\n    onDeletePostComment,\r\n    onLikePostComment,\r\n    onUnlikePostComment\r\n  } = usePosts();\r\n\r\n  const location = useLocation();\r\n  const [postErrorMsg, setPostErrorMsg] = useState<string | null>(null);\r\n\r\n  const [postSliderInfo, setPostSliderInfo] = useState<{postId: string | null; photos: string[]; displayedPhotoIndex: number}>({\r\n    postId: null,\r\n    photos: [],\r\n    displayedPhotoIndex: 0\r\n  });\r\n\r\n  const [deleteCommentInfo, setDeleteCommentInfo] = useState<{postId: string | null; commentId: string | null}>({\r\n    postId: null,\r\n    commentId: null\r\n  });\r\n\r\n  const [highlightedCommentId, setHighlightedCommentId] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if(location.state && location.state.commentId) {\r\n      setHighlightedCommentId(location.state.commentId);\r\n    }\r\n  }, [location.state]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      window.history.replaceState({}, document.title);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if(!postId) {\r\n      setPostErrorMsg(\"Post not found\");\r\n    } else {\r\n      onGetPosts(`${postId}`);\r\n    }\r\n  }, [postId, onGetPosts]);\r\n\r\n  const clearPostErrorMsg = useCallback((): void => {\r\n    setPostErrorMsg(null);\r\n  }, []);\r\n\r\n  const onCloseDeletePostCommentModal = useCallback((): void => {\r\n    setDeleteCommentInfo({\r\n      postId: null,\r\n      commentId: null\r\n    });\r\n  }, []);\r\n\r\n  const onPrepareDeletePostComment = useCallback((postId: string, commentId: string): void => {\r\n    setDeleteCommentInfo({\r\n      postId,\r\n      commentId\r\n    });\r\n  }, []);\r\n\r\n  const deletePostComment = useCallback(async(): Promise<void> => {\r\n    if(deleteCommentInfo.postId && deleteCommentInfo.commentId) {\r\n      await onDeletePostComment(deleteCommentInfo.postId, deleteCommentInfo.commentId);\r\n      onCloseDeletePostCommentModal();\r\n    } else {\r\n      setPostErrorMsg(\"Post id not found\");\r\n    }\r\n  }, [deleteCommentInfo.commentId, deleteCommentInfo.postId, onCloseDeletePostCommentModal, onDeletePostComment]);\r\n\r\n  const onOpenPostPhotoSlider = useCallback((postId: string, photos: IPostPhoto[], displayedPhotoIndex: number): void => {\r\n    const photoUrls = photos.map(photo => photo.photo.secure_url);\r\n    setPostSliderInfo({\r\n      postId,\r\n      photos: photoUrls,\r\n      displayedPhotoIndex\r\n    });\r\n  }, []);\r\n\r\n  const onClosePostPhotoSlider = (): void => {\r\n    setPostSliderInfo({\r\n      postId: null,\r\n      photos: [],\r\n      displayedPhotoIndex: 0\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {postSliderInfo.postId !== null && postSliderInfo.photos.length > 0 && (\r\n        <PostPhotoSlider\r\n          show={postSliderInfo.postId !== null && postSliderInfo.photos.length > 0}\r\n          onClose={onClosePostPhotoSlider}\r\n          photos={postSliderInfo.photos}\r\n          displayedPhotoIndex={postSliderInfo.displayedPhotoIndex} />\r\n      )}\r\n      {(postErrorMsg !== null || postsErrorMsg !== null) && (\r\n        <DefaultModal\r\n          show={postErrorMsg !== null || postsErrorMsg !== null}\r\n          isErrorModal={true}\r\n          title=\"Error occured\"\r\n          text={\r\n            postErrorMsg ? postErrorMsg : postsErrorMsg ? postsErrorMsg : \"Error unknown\"\r\n          }\r\n          onClose={\r\n            postErrorMsg\r\n            ? clearPostErrorMsg\r\n            : postsErrorMsg\r\n            ? onClearPostsError\r\n            : () => {return}\r\n          }>\r\n          <ModalBtn\r\n            btnType=\"button\"\r\n            btnCustomType=\"btn__ok\"\r\n            btnText=\"ok\"\r\n            onClick={\r\n              postErrorMsg\r\n              ? clearPostErrorMsg\r\n              : postsErrorMsg\r\n              ? onClearPostsError\r\n              : () => {return}\r\n            } />\r\n        </DefaultModal>\r\n      )}\r\n      {((deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null) || postToDeleteId !== null) && (\r\n        <DefaultModal\r\n          show={((deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null) || postToDeleteId !== null)}\r\n          isErrorModal={false}\r\n          title=\"Prepairing to delete comment\"\r\n          text=\"Are you sure you want to delete this post's comment?\"\r\n          onClose={\r\n            deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null\r\n            ? onCloseDeletePostCommentModal\r\n            : postToDeleteId !== null\r\n            ? onCancelDeletePost\r\n            : () => {return}\r\n          }>\r\n          <ModalBtn\r\n            btnType=\"button\"\r\n            btnCustomType=\"btn__cancel\"\r\n            btnText=\"cancel\"\r\n            onClick={\r\n              deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null\r\n              ? onCloseDeletePostCommentModal\r\n              : postToDeleteId !== null\r\n              ? onCancelDeletePost\r\n              : () => {return}\r\n            } />\r\n          <ModalBtn\r\n            btnType=\"button\"\r\n            btnCustomType=\"btn__confirm\"\r\n            btnText=\"delete\"\r\n            onClick={\r\n              deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null\r\n              ? deletePostComment\r\n              : postToDeleteId !== null\r\n              ? onDeletePost\r\n              : () => {return}\r\n            } />\r\n        </DefaultModal>\r\n      )}\r\n      <main style={{margin: \"2rem 0\"}}>\r\n        {\r\n          postsLoading\r\n          ? <Spinner />\r\n          : posts === null || posts.length === 0\r\n          ? <p style={{textAlign: \"center\", fontSize: \"2rem\"}}>No post found</p>\r\n          : (\r\n            <SinglePost\r\n              post={posts[0]}\r\n              highlightedCommentId={highlightedCommentId}\r\n              onCommentOnPost={onCommentOnPost}\r\n              onLikePost={onLikePost}\r\n              onUnlikePost={onUnlikePost}\r\n              onLikePostComment={onLikePostComment}\r\n              onUnlikePostComment={onUnlikePostComment}\r\n              onPrepareDeletePostComment={onPrepareDeletePostComment}\r\n              onPrepareDeletePost={onPrepareDeletePost}\r\n              onOpenPostPhotoSlider={onOpenPostPhotoSlider} />\r\n          )\r\n        }\r\n        {/* {\r\n          postsLoading\r\n          ? <Spinner />\r\n          : !postsLoading && posts.length > 0 && (\r\n            <SinglePost\r\n              post={posts[0]}\r\n              highlightedCommentId={highlightedCommentId}\r\n              onCommentOnPost={onCommentOnPost}\r\n              onLikePost={onLikePost}\r\n              onUnlikePost={onUnlikePost}\r\n              onLikePostComment={onLikePostComment}\r\n              onUnlikePostComment={onUnlikePostComment}\r\n              onPrepareDeletePostComment={onPrepareDeletePostComment}\r\n              onPrepareDeletePost={onPrepareDeletePost} />\r\n          )\r\n        } */}\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SinglePostPage;"],"names":["postId","useParams","_usePosts","usePosts","postsLoading","postsErrorMsg","postToDeleteId","posts","onClearPostsError","onGetPosts","onPrepareDeletePost","onCancelDeletePost","onDeletePost","onLikePost","onUnlikePost","onCommentOnPost","onDeletePostComment","onLikePostComment","onUnlikePostComment","location","useLocation","_useState","useState","_useState2","_slicedToArray","postErrorMsg","setPostErrorMsg","_useState3","photos","displayedPhotoIndex","_useState4","postSliderInfo","setPostSliderInfo","_useState5","commentId","_useState6","deleteCommentInfo","setDeleteCommentInfo","_useState7","_useState8","highlightedCommentId","setHighlightedCommentId","useEffect","state","window","history","replaceState","document","title","concat","clearPostErrorMsg","useCallback","onCloseDeletePostCommentModal","onPrepareDeletePostComment","deletePostComment","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","onOpenPostPhotoSlider","photoUrls","map","photo","secure_url","_jsxs","_Fragment","children","length","_jsx","PostPhotoSlider","show","onClose","DefaultModal","isErrorModal","text","ModalBtn","btnType","btnCustomType","btnText","onClick","style","margin","Spinner","textAlign","fontSize","SinglePost","post"],"sourceRoot":""}