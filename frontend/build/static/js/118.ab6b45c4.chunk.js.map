{"version":3,"file":"static/js/118.ab6b45c4.chunk.js","mappings":"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","sources":["webpack://frontend/./src/styles/components/chatsAndMessages/chatsPageContainer.module.scss?203b","components/ChatsAndMessages/ChatsPageContainer.tsx","webpack://frontend/./src/styles/components/chatsAndMessages/chatsBox.module.scss?f73f","components/ChatsAndMessages/ChatsBox.tsx","webpack://frontend/./src/styles/components/chatsAndMessages/selectedChat.module.scss?39ff","webpack://frontend/./src/styles/components/chatsAndMessages/singleMessage.module.scss?cf94","components/ChatsAndMessages/UserMessage.tsx","components/ChatsAndMessages/MyMessage.tsx","components/ChatsAndMessages/SelectedChat.tsx","webpack://frontend/./src/styles/components/chatsAndMessages/selectedChatPhotos.module.scss?1f4f","webpack://frontend/./src/styles/components/chatsAndMessages/chatPhotosSlider.module.scss?461a","components/ChatsAndMessages/ChatPhotosSlider.tsx","components/ChatsAndMessages/SelectedChatPhotos.tsx","pages/ChatsPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"chatsPageContainer_container__osrAc\"};","import { FC } from 'react';\r\nimport styles from '../../styles/components/chatsAndMessages/chatsPageContainer.module.scss';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ChatsPageContainer: FC<Props> = (props) => {\r\n  return (\r\n    <main className={styles.container}>{props.children}</main>\r\n  );\r\n};\r\n\r\nexport default ChatsPageContainer;","// extracted by mini-css-extract-plugin\nexport default {\"show_chats\":\"chatsBox_show_chats__YXjtf\",\"show_chats__visible\":\"chatsBox_show_chats__visible__Jn9Wt\",\"show_chats__text\":\"chatsBox_show_chats__text__s5KP3\",\"show_chats__content\":\"chatsBox_show_chats__content__4+-Ps\",\"box\":\"chatsBox_box__AylM7\",\"box__show\":\"chatsBox_box__show__CfrXJ\",\"box__user\":\"chatsBox_box__user__TfMOL\",\"box__user_img\":\"chatsBox_box__user_img__ax-8m\",\"box__user_name\":\"chatsBox_box__user_name__AejxQ\",\"box__filters\":\"chatsBox_box__filters__D1dJ5\",\"box__input\":\"chatsBox_box__input__3lXVZ\",\"box__btns\":\"chatsBox_box__btns__QGoaM\",\"box__btn\":\"chatsBox_box__btn__EDszT\",\"box__btn_active\":\"chatsBox_box__btn_active__MgEMS\",\"box__chats\":\"chatsBox_box__chats__LkRVz\"};","import { FC, useCallback, useState } from 'react';\r\nimport styles from '../../styles/components/chatsAndMessages/chatsBox.module.scss';\r\nimport noUserImg from '../../images/no-user.jpg';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport SingleChatBox from './SingleChatBox';\r\nimport Spinner from '../Shared/Spinner';\r\n\r\ninterface Props {\r\n  onGetSingleChat: (chatId: string, userId: string) => Promise<void>;\r\n}\r\n\r\nconst ChatsBox: FC<Props> = (props) => {\r\n  const { authUser } = useTypedSelector(state => state.auth);\r\n  const { chatsLoading, chatsErrorMsg, chats } = useTypedSelector(state => state.chats);\r\n\r\n  const [smallScreenChatsShow, setSmallScreenChatsShow] = useState(false);\r\n\r\n  // const [btnActive, setBtnActive] = useState<\"all\" | \"online\" | \"offline\">(\"all\");\r\n\r\n  const getUserForChat = (users: {_id: string, fullName: string, profilePhotoUrl: string}[]): {_id: string, fullName: string, profilePhotoUrl: string} => {\r\n    const user = users.find(u => u._id !== authUser!._id);\r\n    return user!;\r\n  };\r\n\r\n  const getAuthUserUnreadMessages = (chatId: string): number => {\r\n    const targetChat = chats.find(chat => chat._id === chatId);\r\n    if(!targetChat) return 0;\r\n\r\n    const unreadMessages = targetChat.unreadMessages.find(msgs => msgs.user === authUser!._id);\r\n    if(!unreadMessages) return 0;\r\n\r\n    return unreadMessages.messages.length;\r\n  };\r\n\r\n  const toggleChatsShow = (): void => {\r\n    setSmallScreenChatsShow(prev => !prev);\r\n  };\r\n\r\n  const onGetSingleChatAndCloseSmallScreenBox = useCallback(async(chatId: string, userId: string): Promise<void> => {\r\n    props.onGetSingleChat(chatId, userId);\r\n    setSmallScreenChatsShow(false);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={`${styles.show_chats} ${smallScreenChatsShow ? styles.show_chats__visible : \"\"}`}>\r\n        <div className={styles.show_chats__content}>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.show_chats__btn}\r\n            onClick={toggleChatsShow}>\r\n            <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 1024 1024\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z\"></path></svg>\r\n          </button>\r\n          <p className={styles.show_chats__text}>\r\n            {smallScreenChatsShow === false ? \"see chats\" : \"hide chats\"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <section className={`${styles.box} ${smallScreenChatsShow ? styles.box__show : \"\"}`}>\r\n        {\r\n          authUser && (\r\n            <>\r\n              <article className={styles.box__user}>\r\n                <div className={styles.box__user_img}>\r\n                  <img src={authUser.profilePhotoUrl || noUserImg} alt=\"user\" />\r\n                </div>\r\n                <p className={styles.box__user_name}>\r\n                  {authUser.fullName}\r\n                </p>\r\n              </article>\r\n              {/* <article className={styles.box__filters}>\r\n                <div className={styles.box__input}>\r\n                  <label htmlFor=\"find\">Search users</label>\r\n                  <input \r\n                    type=\"text\"\r\n                    name=\"find\"\r\n                    id=\"find\" />\r\n                </div>\r\n                <div className={styles.box__btns}>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={`${styles.box__btn} ${btnActive === \"all\" ? styles.box__btn_actuve : \"\"}`}>\r\n                    all\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={`${styles.box__btn} ${btnActive === \"online\" ? styles.box__btn_actuve : \"\"}`}>\r\n                    online\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={`${styles.box__btn} ${btnActive === \"offline\" ? styles.box__btn_actuve : \"\"}`}>\r\n                    offline\r\n                  </button>\r\n                </div>\r\n              </article> */}\r\n              <article className={styles.box__chats}>\r\n                <div className={styles.box__chats_content}>\r\n                  {\r\n                    chatsLoading\r\n                    ? <Spinner />\r\n                    : !chatsLoading && chatsErrorMsg\r\n                    ? <p className={styles.cbox__chats_error}></p>\r\n                    : !chatsLoading && !chatsErrorMsg && chats.length === 0\r\n                    ? <p className={styles.box__chats_empty}>No chats</p>\r\n                    : chats.map(chat => {\r\n                      return (\r\n                        <SingleChatBox\r\n                          key={chat._id}\r\n                          chat={chat}\r\n                          user={getUserForChat(chat.users)}\r\n                          isChatsPageBox={true}\r\n                          onGetSingleChat={onGetSingleChatAndCloseSmallScreenBox}\r\n                          numOfUnseenMessages={getAuthUserUnreadMessages(chat._id)} />\r\n                      );\r\n                    })\r\n                  }\r\n                </div>\r\n              </article>\r\n            </>\r\n          )\r\n        }\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatsBox;","// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"selectedChat_chat__qgs4e\",\"chat__user\":\"selectedChat_chat__user__Fejt5\",\"chat__user_info\":\"selectedChat_chat__user_info__9MCxy\",\"chat__user_img\":\"selectedChat_chat__user_img__-L1dQ\",\"chat__user_name\":\"selectedChat_chat__user_name__oo5ki\",\"chat__user_online\":\"selectedChat_chat__user_online__pccnK\",\"chat__user_last_seen\":\"selectedChat_chat__user_last_seen__oFfn+\",\"chat__user_btn\":\"selectedChat_chat__user_btn__vmFr9\",\"chat__user_btn_icon\":\"selectedChat_chat__user_btn_icon__6Lj0w\",\"chat__user_btn_text\":\"selectedChat_chat__user_btn_text__fLMw-\",\"chat__messages\":\"selectedChat_chat__messages__HW8qF\",\"chat__messages_content\":\"selectedChat_chat__messages_content__SkR92\",\"chat__form\":\"selectedChat_chat__form__oKfWj\",\"chat__form_photo\":\"selectedChat_chat__form_photo__6Uwwl\",\"chat__form_photo_input\":\"selectedChat_chat__form_photo_input__lXBh0\",\"chat__form_photo_icon\":\"selectedChat_chat__form_photo_icon__bMMsj\",\"chat__form_photo_text\":\"selectedChat_chat__form_photo_text__jEDQE\",\"chat__form_photo_uploaded\":\"selectedChat_chat__form_photo_uploaded__TLRwV\",\"image\":\"selectedChat_image__HYFwK\",\"chat__form_text\":\"selectedChat_chat__form_text__TqiHw\",\"chat__form_emoji\":\"selectedChat_chat__form_emoji__viKAP\",\"chat__form_emoji_icon\":\"selectedChat_chat__form_emoji_icon__cqK9D\",\"chat__form_emoji_list\":\"selectedChat_chat__form_emoji_list__xmliz\",\"emoji\":\"selectedChat_emoji__fN1LK\",\"chat__form_btn\":\"selectedChat_chat__form_btn__LXUAL\",\"chat__form_btn_icon\":\"selectedChat_chat__form_btn_icon__3ZYZo\",\"chat__form_btn_text\":\"selectedChat_chat__form_btn_text__c8WMl\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"singleMessage_message__4+2n4\",\"message__me\":\"singleMessage_message__me__3ADOX\",\"message__content\":\"singleMessage_message__content__AWs89\",\"message__text\":\"singleMessage_message__text__6LJVB\",\"deliverd\":\"singleMessage_deliverd__igvgR\",\"seen\":\"singleMessage_seen__9TT9A\",\"message__user\":\"singleMessage_message__user__qhUKn\",\"message__info\":\"singleMessage_message__info__XuyD-\",\"message__user_photo\":\"singleMessage_message__user_photo__fJCAA\",\"message__photo\":\"singleMessage_message__photo__drmn2\",\"message__time\":\"singleMessage_message__time__yooQ-\",\"message__seen\":\"singleMessage_message__seen__Qi-aw\",\"message__seen_icon\":\"singleMessage_message__seen_icon__k5RgG\"};","import { FC } from 'react';\r\nimport styles from '../../styles/components/chatsAndMessages/singleMessage.module.scss';\r\nimport noUserImg from '../../images/no-user.jpg';\r\nimport { IChatUser } from '../../store/types/chatsTypes';\r\nimport { formatDateToFullTime } from '../../utils/formatDateToFullTime';\r\n\r\ninterface Props {\r\n  user: IChatUser;\r\n  text: string;\r\n  photo: string | null;\r\n  time: Date;\r\n  edited: boolean;\r\n  status: \"delivered\" | \"seen\";\r\n  onOpenPhotoSlider: () => void;\r\n}\r\n\r\nconst UserMessage: FC<Props> = (props) => {\r\n  return (\r\n    <div className={`${styles.message} ${styles.message__user} ${styles[props.status]}`}>\r\n      <div className={styles.message__content}>\r\n        <div className={styles.message__user_photo}>\r\n          <img src={props.user.profilePhotoUrl || noUserImg} alt=\"user\" />\r\n        </div>\r\n        <div className={styles.message__info}>\r\n          {\r\n            props.photo && (\r\n              <div className={styles.message__photo} onClick={props.onOpenPhotoSlider}>\r\n                <img src={props.photo} alt=\"msg_photo\" />\r\n              </div>\r\n            )\r\n          }\r\n          <p className={styles.message__text}>\r\n            {props.text}\r\n          </p>\r\n          <p className={styles.message__time}>\r\n            {formatDateToFullTime(props.time)}\r\n          </p>\r\n          {\r\n            props.edited && <p className={styles.message__edited}>edited</p>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserMessage;","import { FC } from 'react';\r\nimport styles from '../../styles/components/chatsAndMessages/singleMessage.module.scss';\r\nimport { formatDateToFullTime } from '../../utils/formatDateToFullTime';\r\n\r\ninterface Props {\r\n  text: string;\r\n  photo: string | null;\r\n  time: Date;\r\n  edited: boolean;\r\n  status: \"delivered\" | \"seen\";\r\n  onOpenPhotoSlider: () => void;\r\n}\r\n\r\nconst MyMessage: FC<Props> = (props) => {\r\n  return (\r\n    <div className={`${styles.message} ${styles.message__me} ${styles[props.status]}`}>\r\n      <div className={styles.message__content}>\r\n        {\r\n          props.photo && (\r\n            <div className={styles.message__photo} onClick={props.onOpenPhotoSlider}>\r\n              <img src={props.photo} alt=\"msg_photo\" />\r\n            </div>\r\n          )\r\n        }\r\n        <p className={styles.message__text}>\r\n          {props.text}\r\n        </p>\r\n        {\r\n          props.status === \"seen\" && (\r\n            <div className={styles.message__seen}>\r\n              <div className={styles.message__seen_icon}>\r\n                <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 16 16\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12.354 4.354a.5.5 0 0 0-.708-.708L5 10.293 1.854 7.146a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l7-7zm-4.208 7-.896-.897.707-.707.543.543 6.646-6.647a.5.5 0 0 1 .708.708l-7 7a.5.5 0 0 1-.708 0z\"></path><path d=\"m5.354 7.146.896.897-.707.707-.897-.896a.5.5 0 1 1 .708-.708z\"></path></svg>\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n        <p className={styles.message__time}>\r\n          {formatDateToFullTime(props.time)}\r\n        </p>\r\n        \r\n        {\r\n          props.edited && <p className={styles.message__edited}>edited</p>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyMessage;","import { ChangeEvent, FC, FormEvent, useState, useEffect, useCallback, useRef, UIEventHandler } from 'react';\r\nimport styles from '../../styles/components/chatsAndMessages/selectedChat.module.scss';\r\nimport noUserImg from '../../images/no-user.jpg';\r\nimport moment from 'moment';\r\nimport { InView } from 'react-intersection-observer';\r\n// hooks\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\n// types\r\nimport { IMessage, ISelectedChat } from '../../store/types/chatsTypes';\r\n// components\r\nimport Spinner from '../Shared/Spinner';\r\nimport UserMessage from './UserMessage';\r\nimport MyMessage from './MyMessage';\r\nimport CloseBtn from '../Buttons/CloseBtn';\r\nimport Backdrop from '../Shared/Backdrop';\r\n\r\ninterface Props {\r\n  loading: boolean;\r\n  errorMsg: string | null;\r\n  chat: ISelectedChat | null;\r\n  photoMessages: IMessage[];\r\n  onSendMessage: (event: FormEvent<HTMLFormElement>, messageText: string, messagePhoto: File | null) => Promise<void>;\r\n  onMarkMessagesAsSeen: (messages: string[]) => Promise<void>;\r\n  chatPhotosShow: boolean;\r\n  onChatPhotosToggle: () => void;\r\n  onOpenPhotoSlider: (photoIndex: number) => void;\r\n  isScrolling: boolean;\r\n  setIsScrolling: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst SelectedChat: FC<Props> = (props) => {\r\n  const activeUsers = useTypedSelector(state => state.activeUsers);\r\n\r\n  const [messageText, setMessageText] = useState(\"\");\r\n  const [messagePhoto, setMessagePhoto] = useState<File | null>(null);\r\n\r\n  const [unseenVisibleMessages, setUnseenVisibleMessages] = useState<string[]>([]);\r\n  const [emojiListShow, setEmojiListShow] = useState(false);\r\n\r\n  const messageContainerRef = useRef<HTMLElement | null>(null);\r\n  \r\n  const [firstUnseenMessage, setFirstUnseenMessage] = useState<Element | null>(null);\r\n  \r\n  const emojiList = [\r\n    \"🙂\", \"😀\t\", \"😃\", \"😄\", \"😁\", \"😅\", \"😆\", \"🤣\", \"😂\", \"🙃\", \"😉\", \"😊\", \"😇\", \"😎\", \"😍\", \"😘\", \"😝\", \"😐\", \"😮‍💨\",\r\n    \"😟\", \"😧\", \"😢\", \"😡\", \"💗\", \"💛\", \"👌\", \"🤟\", \"🖕\", \"👍\", \"👎\", \"🙏\", \"💪\"\r\n  ];\r\n    \r\n  useEffect(() => {\r\n    if(messageContainerRef.current && props.chat && !props.isScrolling) {\r\n      if(props.chat.unreadMessages.length <= 1) {\r\n        const scrollHeight = messageContainerRef.current.scrollHeight;\r\n        messageContainerRef.current.scrollTo({top: scrollHeight}); \r\n      } else if(props.chat.unreadMessages.length > 0) {\r\n        const container = messageContainerRef.current.firstElementChild;\r\n        \r\n        let firstUnseenMsg = Array.from(container!.children).find(c => c.classList.contains(\"message__delivered\"));\r\n        \r\n        if(firstUnseenMsg) {\r\n          setFirstUnseenMessage(firstUnseenMsg)\r\n        }\r\n      } \r\n    }\r\n  }, [messageContainerRef, props.chat, props.isScrolling]);\r\n\r\n  useEffect(() => {\r\n    if(firstUnseenMessage) {\r\n      firstUnseenMessage.scrollIntoView(false);\r\n    }\r\n  }, [firstUnseenMessage]);\r\n\r\n  const isUserActive = (): boolean => {\r\n    const activeUserIds = activeUsers.map(user => user.userId);\r\n    if(!props.chat) return false\r\n    if(activeUserIds.includes(props.chat.user._id)) return true;\r\n    return false\r\n  };\r\n\r\n  const onOpenSlider = (msgId: string): void => {\r\n    const targetIndex = props.photoMessages.findIndex(msg => msg._id === msgId);\r\n    if(targetIndex !== -1) {\r\n      props.onOpenPhotoSlider(targetIndex);\r\n    }\r\n  };\r\n\r\n  const onMsgTextChanged = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    const target = event.target;\r\n    setMessageText(target.value);\r\n  };\r\n\r\n  const onEmojiSelect = (emoji: string): void => {\r\n    setMessageText(prev => `${prev} ${emoji}`);\r\n  };\r\n\r\n  const onMsgPhotoChanged = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    const target = event.target;\r\n    if(target.files && target.files.length > 0) {\r\n      setMessagePhoto(target.files[0]);\r\n    } else {\r\n      setMessagePhoto(null);\r\n    }\r\n  };\r\n\r\n  const onRemoveMsgPhoto = (): void => {\r\n    setMessagePhoto(null);\r\n  };\r\n\r\n  const onSendMessage = async(event: FormEvent<HTMLFormElement>): Promise<void> => {\r\n    props.onSendMessage(event, messageText, messagePhoto);\r\n    props.setIsScrolling(false);\r\n    setMessageText(\"\");\r\n    setMessagePhoto(null);\r\n  };\r\n\r\n  const onAddToUnseenVisibleMessages = (messageId: string): void => {\r\n    setUnseenVisibleMessages(prev => {\r\n      if(prev.includes(messageId)) return prev;\r\n\r\n      return prev.concat(messageId);\r\n    });\r\n  };\r\n\r\n  const onMarkMessagesAsSeen = useCallback(async(): Promise<void> => {\r\n    if(unseenVisibleMessages.length > 0) {\r\n      await props.onMarkMessagesAsSeen(unseenVisibleMessages);\r\n      setUnseenVisibleMessages([]);\r\n    }\r\n  }, [unseenVisibleMessages]);\r\n\r\n  const onScrollMessages = useCallback((event: any): void => {\r\n      const {scrollHeight, scrollTop, clientHeight} = event.target;\r\n      const scroll = scrollHeight - scrollTop - clientHeight;\r\n      if(scroll < 20) {\r\n        props.setIsScrolling(false);\r\n      } else {\r\n        props.setIsScrolling(true);\r\n      }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let timeout: any;\r\n\r\n    timeout = setTimeout(() =>  {\r\n      onMarkMessagesAsSeen();\r\n    }, 200);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [onMarkMessagesAsSeen]);\r\n\r\n  const onCloseEmojiList = useCallback(() => {\r\n    setEmojiListShow(false);\r\n  }, []);\r\n  \r\n\r\n  if(props.loading) return <Spinner />;\r\n\r\n  return (\r\n    <>\r\n      {emojiListShow && (\r\n        <Backdrop\r\n          show={emojiListShow}\r\n          bcgColor=\"dark\"\r\n          onClose={onCloseEmojiList} />\r\n      )}\r\n      <section className={styles.chat}>\r\n        {\r\n          !props.chat\r\n          ? <p className={styles.chat__emoty}>No Chat selected</p>\r\n          : props.errorMsg \r\n          ? <p className={styles.chat__error}>{props.errorMsg}</p>\r\n          : (\r\n            <>\r\n              <article className={styles.chat__user}>\r\n                <div className={styles.chat__user_info}>\r\n                  <div className={styles.chat__user_img}>\r\n                    <img src={props.chat.user.profilePhotoUrl || noUserImg} alt=\"user\" />\r\n                  </div>\r\n                  <div className={styles.chat__user_details}>\r\n                    <p className={styles.chat__user_name}>\r\n                      {props.chat.user.fullName}\r\n                    </p>\r\n                    {\r\n                      isUserActive()\r\n                      ? <p className={styles.chat__user_online}>online</p>\r\n                      : <p className={styles.chat__user_last_seen}>last seen {moment(props.chat.user.lastTimeSeen).fromNow()}</p>\r\n                    }\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  type=\"button\"\r\n                  className={styles.chat__user_btn}\r\n                  onClick={props.onChatPhotosToggle}>\r\n                  <span className={styles.chat__user_btn_icon}>\r\n                    <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"></path><path d=\"M21 3H3C2 3 1 4 1 5v14c0 1.1.9 2 2 2h18c1 0 2-1 2-2V5c0-1-1-2-2-2zm0 15.92c-.02.03-.06.06-.08.08H3V5.08L3.08 5h17.83c.03.02.06.06.08.08v13.84zm-10-3.41L8.5 12.5 5 17h14l-4.5-6z\"></path></svg>\r\n                  </span>\r\n                  <span className={styles.chat__user_btn_text}>\r\n                    {props.chatPhotosShow ? \"hide\" : \"show\"} chat photos\r\n                  </span>\r\n                </button>\r\n              </article>\r\n              <article className={styles.chat__messages} ref={messageContainerRef} onScroll={onScrollMessages}>\r\n                <div className={styles.chat__messages_content}>\r\n                  {\r\n                    props.chat.messages.map((message, i) => {\r\n                      if(message.sender._id === props.chat!.user._id) {\r\n                        return (\r\n                          <InView\r\n                            key={message._id}\r\n                            className={`message__${message.status}`}\r\n                            onChange={(inView) => {\r\n                              if(inView && message.status !== \"seen\") {\r\n                                console.log(\"VIEW\", message._id);\r\n                                onAddToUnseenVisibleMessages(message._id);\r\n                              }\r\n                            }}>\r\n                            <UserMessage\r\n                              user={message.sender}\r\n                              text={message.text}\r\n                              photo={message.photo && message.photo.secure_url ? message.photo.secure_url : null}\r\n                              time={message.createdAt}\r\n                              edited={message.edited || false}\r\n                              status={message.status}\r\n                              onOpenPhotoSlider={message.photo ? () => onOpenSlider(message._id) : () => {return}} />\r\n                          </InView>\r\n                        );\r\n                      }\r\n\r\n                      return (\r\n                        <MyMessage\r\n                          key={message._id}\r\n                          text={message.text}\r\n                          photo={message.photo && message.photo.secure_url ? message.photo.secure_url : null}\r\n                          time={message.createdAt}\r\n                          edited={message.edited || false}\r\n                          status={message.status}\r\n                          onOpenPhotoSlider={message.photo ? () => onOpenSlider(message._id) : () => {return}} />\r\n                      );\r\n                    })\r\n                  }\r\n                </div>\r\n              </article>\r\n              <form className={styles.chat__form} onSubmit={onSendMessage}>\r\n                <div className={styles.chat__form_photo}>\r\n                  {messagePhoto && (\r\n                    <CloseBtn\r\n                      size=\"btn__small\"\r\n                      position=\"btn__absolute\"\r\n                      onClick={onRemoveMsgPhoto} />\r\n                  )}\r\n                  <label className={styles.chat__form_photo_label} htmlFor=\"photo\">\r\n                    <input \r\n                      type=\"file\" \r\n                      accept=\"image/*\" \r\n                      id=\"photo\" \r\n                      className={styles.chat__form_photo_input}\r\n                      onChange={onMsgPhotoChanged} />\r\n                    {\r\n                      messagePhoto\r\n                      ? (\r\n                        <div className={styles.chat__form_photo_uploaded}>\r\n                          <div className={styles.image}>\r\n                            <img src={URL.createObjectURL(messagePhoto)} alt=\"msgPhoto\" />\r\n                          </div>\r\n                        </div>\r\n                      ) \r\n                      : (\r\n                        <span className={styles.chat__form_photo_icon}>\r\n                          <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"></path><path d=\"M21 3H3C2 3 1 4 1 5v14c0 1.1.9 2 2 2h18c1 0 2-1 2-2V5c0-1-1-2-2-2zm0 15.92c-.02.03-.06.06-.08.08H3V5.08L3.08 5h17.83c.03.02.06.06.08.08v13.84zm-10-3.41L8.5 12.5 5 17h14l-4.5-6z\"></path></svg>\r\n                        </span>\r\n                      )\r\n                    }\r\n                    <span className={styles.chat__form_photo_text}>\r\n                      upload photo\r\n                    </span>\r\n                  </label>\r\n                </div>\r\n                <input \r\n                  className={styles.chat__form_text}\r\n                  type=\"text\"\r\n                  placeholder=\"Write message\"\r\n                  value={messageText}\r\n                  onChange={onMsgTextChanged} />\r\n                <div className={styles.chat__form_emoji}>\r\n                  {\r\n                    emojiListShow && (\r\n                      <div className={styles.chat__form_emoji_list}>\r\n                        {emojiList.map((emoji, i) => {\r\n                          return <p key={i} className={styles.emoji} onClick={() => onEmojiSelect(emoji)}>{emoji}</p>\r\n                        })}\r\n                      </div>\r\n                    )\r\n                  }\r\n                  <span className={styles.chat__form_emoji_icon} onClick={() => setEmojiListShow(true)}>\r\n                    <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 16 16\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"M4.285 9.567a.5.5 0 0 1 .683.183A3.498 3.498 0 0 0 8 11.5a3.498 3.498 0 0 0 3.032-1.75.5.5 0 1 1 .866.5A4.498 4.498 0 0 1 8 12.5a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .183-.683zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zm4 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5z\"></path></svg>\r\n                  </span>\r\n                </div>\r\n                <button\r\n                  type=\"submit\"\r\n                  className={styles.chat__form_btn}\r\n                  disabled={messageText.trim().length === 0 && !messagePhoto}>\r\n                  <span className={styles.chat__form_btn_icon}>\r\n                    <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 16 16\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z\"></path></svg>\r\n                  </span>\r\n                  <span className={styles.chat__form_btn_text}>\r\n                    send message\r\n                  </span>\r\n                </button>\r\n              </form>\r\n            </>\r\n          )\r\n        }\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectedChat;","// extracted by mini-css-extract-plugin\nexport default {\"photos\":\"selectedChatPhotos_photos__OnB5b\",\"photos__empty\":\"selectedChatPhotos_photos__empty__OcHu0\",\"photos__show\":\"selectedChatPhotos_photos__show__2U+jk\",\"photos__close\":\"selectedChatPhotos_photos__close__kLjIL\",\"photos__title\":\"selectedChatPhotos_photos__title__5pkR3\",\"photos__list\":\"selectedChatPhotos_photos__list__TeQaX\",\"photos__list_content\":\"selectedChatPhotos_photos__list_content__KdVcx\",\"photo\":\"selectedChatPhotos_photo__kxF8c\"};","// extracted by mini-css-extract-plugin\nexport default {\"slider\":\"chatPhotosSlider_slider__KGIGE\",\"slider__content\":\"chatPhotosSlider_slider__content__T7kWP\",\"slider__close\":\"chatPhotosSlider_slider__close__czmEz\",\"slider__btn\":\"chatPhotosSlider_slider__btn__Cn4yr\",\"slider__btn_left\":\"chatPhotosSlider_slider__btn_left__PO5KZ\",\"slider__btn_right\":\"chatPhotosSlider_slider__btn_right__vabHo\",\"slider__photo\":\"chatPhotosSlider_slider__photo__KATE0\",\"slider__photo_img\":\"chatPhotosSlider_slider__photo_img__5WkgC\",\"slider__photo_info\":\"chatPhotosSlider_slider__photo_info__yaj8F\",\"modalAppear\":\"chatPhotosSlider_modalAppear__L2G1v\"};","import { FC } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from '../../styles/components/chatsAndMessages/chatPhotosSlider.module.scss';\r\nimport Backdrop from '../Shared/Backdrop';\r\nimport { IMessage } from '../../store/types/chatsTypes';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  photos: IMessage[];\r\n  currentPhotoIndex: number;\r\n  onClose: () => void;\r\n  prevPhoto: () => void;\r\n  nextPhoto: () => void;\r\n}\r\n\r\nconst ChatPhotosSlider: FC<Props> = (props) => {\r\n  const { authUser } = useTypedSelector(state => state.auth);\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <Backdrop\r\n        show={props.show}\r\n        bcgColor=\"dark\"\r\n        onClose={props.onClose} />\r\n      <div className={styles.slider}>\r\n        <div className={styles.slider__content}>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.slider__close}\r\n            onClick={props.onClose}>\r\n            close\r\n          </button>\r\n          <div className={styles.slider__btns}>\r\n            <button\r\n              type=\"button\"\r\n              className={`${styles.slider__btn} ${styles.slider__btn_left}`}\r\n              onClick={props.prevPhoto}>\r\n              <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 1024 1024\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M689 165.1L308.2 493.5c-10.9 9.4-10.9 27.5 0 37L689 858.9c14.2 12.2 35 1.2 35-18.5V183.6c0-19.7-20.8-30.7-35-18.5z\"></path></svg>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`${styles.slider__btn} ${styles.slider__btn_right}`}\r\n              onClick={props.nextPhoto}>\r\n              <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 1024 1024\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M715.8 493.5L335 165.1c-14.2-12.2-35-1.2-35 18.5v656.8c0 19.7 20.8 30.7 35 18.5l380.8-328.4c10.9-9.4 10.9-27.6 0-37z\"></path></svg>\r\n            </button>\r\n          </div>\r\n          <div className={styles.slider__photo}>\r\n            <div className={styles.slider__photo_img}>\r\n              <img src={props.photos[props.currentPhotoIndex].photo.secure_url} alt=\"msg_photo\" />\r\n            </div>\r\n            <div className={styles.slider__photo_info}>\r\n              sent by {props.photos[props.currentPhotoIndex].sender._id === authUser!._id ? \"you\" : props.photos[props.currentPhotoIndex].sender.fullName}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>,\r\n    document.getElementById(\"modal\") as HTMLDivElement\r\n  );\r\n};\r\n\r\nexport default ChatPhotosSlider;","import { FC, useState } from 'react';\r\nimport styles from '../../styles/components/chatsAndMessages/selectedChatPhotos.module.scss';\r\nimport { IMessage } from '../../store/types/chatsTypes';\r\nimport ChatPhotosSlider from './ChatPhotosSlider';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  photoMessages: IMessage[];\r\n  sliderShow: boolean;\r\n  currentPhotoIndex: number;\r\n  onOpenPhotoSlider: (photoIndex: number) => void;\r\n  onChatPhotoSliderClose: () => void;\r\n  onPrevPhoto: () => void;\r\n  onNextPhoto: () => void;\r\n  onChatPhotosClose: () => void;\r\n}\r\n\r\nconst SelectedChatPhotos: FC<Props> = (props) => {\r\n  const [sliderShow, setSliderShow] = useState(false);\r\n  const [photoIndex, setPhotoIndex] = useState(0);\r\n\r\n  const [smallScreenPhotosShow, setSmallScreenPhotosShow] = useState(false);\r\n\r\n  // const onOpenPhotoSlider = (photoIndex: number): void => {\r\n  //   setPhotoIndex(photoIndex);\r\n  //   setSliderShow(true);\r\n  // };\r\n\r\n  // const onChatPhotoSliderClose = (): void => {\r\n  //   setSliderShow(false);\r\n  // };\r\n\r\n  // const onPrevPhoto = (): void => {\r\n  //   setPhotoIndex(prev => {\r\n  //     if(prev === 0) return props.photoMessages.length - 1;\r\n  //     return prev - 1;\r\n  //   });\r\n  // };\r\n\r\n  // const onNextPhoto = (): void => {\r\n  //   setPhotoIndex(prev => {\r\n  //     if(prev === props.photoMessages.length - 1) return 0;\r\n  //     return prev + 1;\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      {props.sliderShow && (\r\n        <ChatPhotosSlider\r\n          show={props.sliderShow}\r\n          currentPhotoIndex={props.currentPhotoIndex}\r\n          onClose={props.onChatPhotoSliderClose}\r\n          photos={props.photoMessages}\r\n          prevPhoto={props.onPrevPhoto}\r\n          nextPhoto={props.onNextPhoto} />\r\n      )}\r\n      <section className={`${styles.photos} ${props.show ? styles.photos__show : \"\"}`}>\r\n        <div className={styles.photos__title}>\r\n          <h4>\r\n            Chat Photos\r\n          </h4>\r\n          <button \r\n            className={styles.photos__close}\r\n            onClick={props.onChatPhotosClose}>\r\n            close\r\n          </button>\r\n        </div>\r\n        <article className={styles.photos__list}>\r\n          <div className={styles.photos__list_content}>\r\n            {\r\n              props.photoMessages.length === 0\r\n              ? <p className={styles.photos__empty}>No Photo messages</p>\r\n              : props.photoMessages.map(msg => ({id: msg._id, photo: msg.photo})).map((msg, i) => {\r\n                return (\r\n                  <div\r\n                    key={msg.id}\r\n                    className={styles.photo}\r\n                    onClick={() => props.onOpenPhotoSlider(i)}>\r\n                    <img src={msg.photo.secure_url} alt=\"message_photo\" />\r\n                  </div>\r\n                );\r\n              })\r\n            }\r\n          </div>\r\n        </article>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectedChatPhotos;","import { FC, FormEvent, useCallback, useEffect, useState } from 'react';\r\nimport axiosChat from '../axios/axiosChat';\r\n// hooks\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\n// types\r\nimport { IMessage, ISelectedChat, IChatUserLastSeen, IChatLastMsg } from '../store/types/chatsTypes';\r\n// components\r\nimport ChatsPageContainer from '../components/ChatsAndMessages/ChatsPageContainer';\r\nimport ChatsBox from '../components/ChatsAndMessages/ChatsBox';\r\nimport SelectedChat from '../components/ChatsAndMessages/SelectedChat';\r\nimport SelectedChatPhotos from '../components/ChatsAndMessages/SelectedChatPhotos';\r\n// redux\r\nimport { getChats, markMessagesAsSeenSuccess, receiveMessageSuccess, sendMessageSuccess, userSeenMyMsgs } from '../store/actions/chatsActions';\r\nimport socket from '../socketIo';\r\n\r\nconst ChatsPage: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n\r\n  const [selectedChat, setSelectedChat] = useState<ISelectedChat | null>(null);\r\n  const [selectedChatLoading, setSelectedChatLoading] = useState(false);\r\n  const [selectedChatErrorMsg, setSelectedChatErrorMsg] = useState<string | null>(null);\r\n  const [showChatPhotos, setShowChatPhotos] = useState(false);\r\n\r\n  const [sliderShow, setSliderShow] = useState(false);\r\n  const [photoIndex, setPhotoIndex] = useState(0);\r\n\r\n  const [isScrolling, setIsScrolling] = useState(false);\r\n\r\n  const onOpenPhotoSlider = (photoIndex: number): void => {\r\n    console.log(photoIndex);\r\n    \r\n    setPhotoIndex(photoIndex);\r\n    setSliderShow(true);\r\n  };\r\n\r\n  const onChatPhotoSliderClose = (): void => {\r\n    setSliderShow(false);\r\n  };\r\n\r\n  const onPrevPhoto = (): void => {\r\n    if(selectedChat && selectedChat.photoMessages.length > 0) {\r\n      setPhotoIndex(prev => {\r\n        if(prev === 0) return selectedChat.photoMessages.length - 1;\r\n        return prev - 1;\r\n      })\r\n    };\r\n  };\r\n\r\n  const onNextPhoto = (): void => {\r\n    if(selectedChat && selectedChat.photoMessages.length > 0) {\r\n      setPhotoIndex(prev => {\r\n        if(prev === selectedChat.photoMessages.length - 1) return 0;\r\n        return prev + 1;\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getChats());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"receiveMessage\", ({userId, chatId, newLastMessage, message}) => {\r\n      console.log(\"WTF\");\r\n      \r\n      dispatch(receiveMessageSuccess(chatId, newLastMessage, userId));\r\n\r\n      setSelectedChat(prev => {\r\n        if(!prev) return prev;\r\n        return {\r\n          ...prev,\r\n          messages: [\r\n            ...prev.messages,\r\n            message\r\n          ],\r\n          unreadMessages: prev.unreadMessages.concat(message._id)\r\n        };\r\n      });\r\n    });\r\n\r\n    socket.on(\"seenMessages\", ({userId, chatId, newUnreadMsgsList, hasLastMsg}) => {\r\n      console.log(\"SEEN\", userId, chatId, newUnreadMsgsList, hasLastMsg);\r\n      dispatch(userSeenMyMsgs(userId, chatId, newUnreadMsgsList, hasLastMsg));\r\n\r\n      setSelectedChat(prev => {\r\n        if(!prev) return prev;\r\n        return {\r\n          ...prev,\r\n          unreadMessages: newUnreadMsgsList,\r\n          messages: prev.messages.map(msg => {\r\n            if(msg.sender !== userId && !newUnreadMsgsList.includes(msg._id)) {\r\n              return {\r\n                ...msg,\r\n                status: \"seen\"\r\n              };\r\n            }\r\n\r\n            return { ...msg };\r\n          })\r\n        };\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"receiveMessage\");\r\n      socket.off(\"seenMessages\");\r\n    };\r\n  }, [dispatch]);\r\n\r\n  const onChatPhotosToggle = (): void => {\r\n    setShowChatPhotos(prev => !prev);\r\n  };\r\n\r\n  const onChatPhotosClose = useCallback((): void => {\r\n    setShowChatPhotos(false);\r\n  }, []);\r\n\r\n  const onGetSingleChat = async(chatId: string, userId: string): Promise<void> => {\r\n    setIsScrolling(false);\r\n    const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n    setSelectedChatLoading(true);\r\n\r\n    try {\r\n      const { data } = await axiosChat.get<{status: string; chatId: string; messages: IMessage[]; user: IChatUserLastSeen; unreadMessages: string[]}>(`/${chatId}/${userId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      console.log(data);\r\n      \r\n      setSelectedChat({\r\n        chatId,\r\n        messages: data.messages,\r\n        photoMessages: data.messages.filter(msg => msg.photo && msg.photo.secure_url),\r\n        user: data.user,\r\n        unreadMessages: data.unreadMessages\r\n      });\r\n    } catch(error) {\r\n      setSelectedChatErrorMsg((error as any).response.data.message);\r\n    }\r\n    setSelectedChatLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(location.state && location.state.clickedChatId && location.state.userId) {\r\n      onGetSingleChat(location.state.clickedChatId, location.state.userId);\r\n    }\r\n  }, [location.state]);\r\n\r\n  // useEffect();\r\n\r\n  const onSendMessage = async(event: FormEvent<HTMLFormElement>, messageText: string, messagePhoto: File | null): Promise<void> => {\r\n    event.preventDefault();\r\n    if(!selectedChat) return;\r\n    const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"chatId\", selectedChat.chatId);\r\n    formData.append(\"userId\", selectedChat.user._id);\r\n    formData.append(\"messageText\", messageText);\r\n    if(messagePhoto) {\r\n      formData.append(\"messagePhoto\", messagePhoto);\r\n    }\r\n\r\n    try {\r\n      const { data } = await axiosChat.post<{status: string; newLastMessage: IChatLastMsg; newMessage: IMessage}>(\"/sendMessage\", formData, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      setSelectedChat(prev => {\r\n        if(!prev) return prev;\r\n        return {\r\n          ...prev,\r\n          messages: [\r\n            ...prev.messages,\r\n            data.newMessage\r\n          ]\r\n        };\r\n      });\r\n\r\n      \r\n      dispatch(sendMessageSuccess(selectedChat.chatId, data.newLastMessage, data.newMessage.receiver._id));\r\n      socket.emit(\"sendMessage\", {userId: selectedChat.user._id, chatId: selectedChat.chatId, newLastMessage: data.newLastMessage, message: data.newMessage});\r\n    } catch(error) {\r\n      setSelectedChatErrorMsg((error as any).response.data.message);\r\n    }\r\n  };\r\n\r\n  const onMarkMessagesAsSeen = async(messages: string[]): Promise<void> => {\r\n    if(!selectedChat) return;\r\n    const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n    const stringMessages = JSON.stringify(messages);\r\n    try {\r\n      const { data } = await axiosChat.post(\"/markMessagesAsSeen\", {\r\n        chatId: selectedChat.chatId,\r\n        messageIds: stringMessages\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      dispatch(markMessagesAsSeenSuccess(selectedChat.chatId, data.newUnreadMsgsList, data.userId, data.hasLastMsg));\r\n      \r\n      setSelectedChat(prev => {\r\n        if(!prev) return prev;\r\n\r\n        const newMessages = prev.messages.map(message => {\r\n          if(message.status !== \"seen\" && messages.includes(message._id)) {\r\n            message.status = \"seen\";\r\n          }\r\n          return message;\r\n        });\r\n        // console.log(newMessages);\r\n        \r\n        \r\n        return {\r\n          ...prev,\r\n          messages: newMessages,\r\n          unreadMessages: prev.unreadMessages.filter(msg => !messages.includes(msg))\r\n        };\r\n      });\r\n\r\n      socket.emit(\"userSeenMessages\", {userId: selectedChat.user._id, chatId: selectedChat.chatId, newUnreadMsgsList: data.newUnreadMsgsList, hasLastMsg: data.hasLastMsg});\r\n    } catch(error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatsPageContainer>\r\n      <ChatsBox\r\n        onGetSingleChat={onGetSingleChat} />\r\n      {\r\n        selectedChat && (\r\n          <SelectedChat\r\n            loading={selectedChatLoading}\r\n            errorMsg={selectedChatErrorMsg}\r\n            chat={selectedChat}\r\n            photoMessages={selectedChat.photoMessages}\r\n            onSendMessage={onSendMessage}\r\n            onMarkMessagesAsSeen={onMarkMessagesAsSeen}\r\n            chatPhotosShow={showChatPhotos}\r\n            onChatPhotosToggle={onChatPhotosToggle}\r\n            onOpenPhotoSlider={onOpenPhotoSlider}\r\n            isScrolling={isScrolling}\r\n            setIsScrolling={setIsScrolling} />\r\n        )\r\n      }\r\n      {\r\n        selectedChat && (\r\n          <SelectedChatPhotos\r\n            show={showChatPhotos}\r\n            photoMessages={selectedChat.photoMessages}\r\n            currentPhotoIndex={photoIndex}\r\n            sliderShow={sliderShow}\r\n            onPrevPhoto={onPrevPhoto}\r\n            onNextPhoto={onNextPhoto}\r\n            onOpenPhotoSlider={onOpenPhotoSlider}\r\n            onChatPhotoSliderClose={onChatPhotoSliderClose}\r\n            onChatPhotosClose={onChatPhotosClose} />\r\n        )\r\n      }\r\n    </ChatsPageContainer>\r\n  );\r\n};\r\n\r\nexport default ChatsPage;"],"names":["props","_jsx","className","styles","children","authUser","useTypedSelector","state","auth","_useTypedSelector2","chats","chatsLoading","chatsErrorMsg","_useState","useState","_useState2","_slicedToArray","smallScreenChatsShow","setSmallScreenChatsShow","getAuthUserUnreadMessages","chatId","targetChat","find","chat","_id","unreadMessages","msgs","user","messages","length","onGetSingleChatAndCloseSmallScreenBox","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userId","wrap","_context","prev","next","onGetSingleChat","stop","_x","_x2","apply","arguments","_jsxs","_Fragment","concat","type","onClick","stroke","fill","strokeWidth","viewBox","height","width","xmlns","d","src","profilePhotoUrl","noUserImg","alt","fullName","Spinner","map","SingleChatBox","users","u","isChatsPageBox","numOfUnseenMessages","status","photo","onOpenPhotoSlider","text","formatDateToFullTime","time","edited","activeUsers","messageText","setMessageText","_useState3","_useState4","messagePhoto","setMessagePhoto","_useState5","_useState6","unseenVisibleMessages","setUnseenVisibleMessages","_useState7","_useState8","emojiListShow","setEmojiListShow","messageContainerRef","useRef","_useState9","_useState10","firstUnseenMessage","setFirstUnseenMessage","useEffect","current","isScrolling","scrollHeight","scrollTo","top","container","firstElementChild","firstUnseenMsg","Array","from","c","classList","contains","scrollIntoView","onOpenSlider","msgId","targetIndex","photoMessages","findIndex","msg","onSendMessage","event","setIsScrolling","onMarkMessagesAsSeen","_callee2","_context2","onScrollMessages","_event$target","target","scrollTop","clientHeight","timeout","setTimeout","clearTimeout","onCloseEmojiList","loading","Backdrop","show","bcgColor","onClose","errorMsg","activeUserIds","includes","isUserActive","moment","lastTimeSeen","fromNow","onChatPhotosToggle","chatPhotosShow","ref","onScroll","message","i","sender","InView","onChange","inView","messageId","console","log","UserMessage","secure_url","createdAt","MyMessage","onSubmit","CloseBtn","size","position","htmlFor","accept","id","files","URL","createObjectURL","placeholder","value","emoji","onEmojiSelect","disabled","trim","ReactDOM","prevPhoto","nextPhoto","photos","currentPhotoIndex","document","getElementById","sliderShow","ChatPhotosSlider","onChatPhotoSliderClose","onPrevPhoto","onNextPhoto","onChatPhotosClose","dispatch","useDispatch","location","useLocation","selectedChat","setSelectedChat","selectedChatLoading","setSelectedChatLoading","selectedChatErrorMsg","setSelectedChatErrorMsg","showChatPhotos","setShowChatPhotos","setSliderShow","_useState11","_useState12","photoIndex","setPhotoIndex","_useState13","_useState14","getChats","socket","newLastMessage","receiveMessageSuccess","_objectSpread","_toConsumableArray","_ref2","newUnreadMsgsList","hasLastMsg","userSeenMyMsgs","_ref3","token","_yield$axiosChat$get","data","localStorage","getItem","axiosChat","headers","Authorization","sent","filter","t0","response","clickedChatId","_ref4","formData","_yield$axiosChat$post","preventDefault","abrupt","FormData","append","newMessage","sendMessageSuccess","receiver","_x3","_x4","_x5","_ref5","_callee3","stringMessages","_yield$axiosChat$post2","_context3","JSON","stringify","messageIds","markMessagesAsSeenSuccess","newMessages","_x6","ChatsPageContainer","ChatsBox","SelectedChat","SelectedChatPhotos"],"sourceRoot":""}