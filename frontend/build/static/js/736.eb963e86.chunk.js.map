{"version":3,"file":"static/js/736.eb963e86.chunk.js","mappings":"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","sources":["pages/SinglePostPage.tsx"],"sourcesContent":["import { FC, useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport axiosPost from '../axios/axiosPost';\r\nimport { usePosts } from '../hooks/usePostsHook/usePosts';\r\nimport { IPost } from '../types/shared/post';\r\nimport SinglePost from '../components/Posts/SinglePost';\r\nimport Spinner from '../components/Shared/Spinner';\r\nimport DefaultModal from '../components/Modals/DefaultModal';\r\nimport ModalBtn from '../components/Buttons/ModalBtn';\r\n\r\nconst SinglePostPage: FC = () => {\r\n  const { postId } = useParams();\r\n\r\n  const {\r\n    postsLoading,\r\n    postsErrorMsg,\r\n    postToDeleteId,\r\n    posts,\r\n    onClearPostsError,\r\n    onGetPosts,\r\n    onPrepareDeletePost,\r\n    onCancelDeletePost,\r\n    onDeletePost,\r\n    onLikePost,\r\n    onUnlikePost,\r\n    onCommentOnPost,\r\n    onDeletePostComment,\r\n    onLikePostComment,\r\n    onUnlikePostComment\r\n  } = usePosts();\r\n\r\n  const location = useLocation();\r\n  const [postErrorMsg, setPostErrorMsg] = useState<string | null>(null);\r\n\r\n  const [deleteCommentInfo, setDeleteCommentInfo] = useState<{postId: string | null; commentId: string | null}>({\r\n    postId: null,\r\n    commentId: null\r\n  });\r\n\r\n  const [highlightedCommentId, setHighlightedCommentId] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if(location.state && location.state.commentId) {\r\n      setHighlightedCommentId(location.state.commentId);\r\n    }\r\n  }, [location.state]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      window.history.replaceState({}, document.title);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if(!postId) {\r\n      setPostErrorMsg(\"Post not found\");\r\n    } else {\r\n      onGetPosts(`${postId}`);\r\n    }\r\n  }, [postId, onGetPosts]);\r\n\r\n  const clearPostErrorMsg = useCallback((): void => {\r\n    setPostErrorMsg(null);\r\n  }, []);\r\n\r\n  // const onGetPost = useCallback(async(): Promise<void> => {\r\n  //   if(!postId) return setPostErrorMsg(\"Post not found\");\r\n\r\n  //   const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n  //   setPostLoading(true);\r\n\r\n  //   try {\r\n  //     const { data } = await axiosPost.get(`/${postId}`, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`\r\n  //       }\r\n  //     });\r\n  //     console.log(data);\r\n  //     setPost(data.post);\r\n  //   } catch(error) {\r\n  //     setPostErrorMsg((error as any).response.data.message);\r\n  //   }\r\n  //   setPostLoading(false);\r\n  // }, [postId]);\r\n\r\n  // useEffect(() => {\r\n  //   onGetPost();\r\n  // }, [onGetPost]);\r\n\r\n  const onCloseDeletePostCommentModal = useCallback((): void => {\r\n    setDeleteCommentInfo({\r\n      postId: null,\r\n      commentId: null\r\n    });\r\n  }, []);\r\n\r\n  const onPrepareDeletePostComment = useCallback((postId: string, commentId: string): void => {\r\n    setDeleteCommentInfo({\r\n      postId,\r\n      commentId\r\n    });\r\n  }, []);\r\n\r\n  const deletePostComment = useCallback(async(): Promise<void> => {\r\n    if(deleteCommentInfo.postId && deleteCommentInfo.commentId) {\r\n      await onDeletePostComment(deleteCommentInfo.postId, deleteCommentInfo.commentId);\r\n      onCloseDeletePostCommentModal();\r\n    } else {\r\n      setPostErrorMsg(\"Post id not found\");\r\n    }\r\n  }, [deleteCommentInfo.commentId, deleteCommentInfo.postId, onCloseDeletePostCommentModal, onDeletePostComment]);\r\n\r\n  // const onCommentOnPost = useCallback(async( \r\n  //   postId: string,\r\n  //   commentTextValue: string,\r\n  //   commentPhoto: File | null,\r\n  //   commentTaggs: {userId: string, userFullName: string}[]\r\n  // ): Promise<void> => {\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"postId\", postId);\r\n  //   formData.append(\"commentText\", commentTextValue);\r\n  //   if(commentPhoto) {\r\n  //     formData.append(\"photo\", commentPhoto);\r\n  //   }\r\n    \r\n  //   formData.append(\"taggs\", JSON.stringify(commentTaggs));\r\n\r\n  //   const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n  //   try {\r\n  //     const { data } = await axiosPost.post(\"/comment\", formData, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`,\r\n  //         \"Content-Type\": \"multipart/form-data\"\r\n  //       }\r\n  //     });\r\n  //     console.log(data);\r\n  //     setPost(prev => {\r\n  //       if(!prev) return null\r\n  //       return {\r\n  //         ...prev,\r\n  //         comments: [\r\n  //           data.comment,\r\n  //           ...prev.comments\r\n  //         ]\r\n  //       };\r\n  //     });\r\n  //   } catch(error) {\r\n  //     setPostErrorMsg((error as any).response.data.message);\r\n  //   }\r\n  // }, []);\r\n\r\n  // const onDeletePostComment = useCallback(async(postId: string, commentId: string): Promise<void> => {\r\n  //   const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n  //   try {\r\n  //     await axiosPost.delete(`/comment/${postId}/${commentId}`, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`\r\n  //       }\r\n  //     });\r\n\r\n  //     onCloseDeletePostCommentModal();\r\n  //     setPost(prev => {\r\n  //       if(!prev) return null\r\n  //       return {\r\n  //         ...prev,\r\n  //         comments: prev.comments.filter(comment => comment._id !== commentId)\r\n  //       };\r\n  //     });\r\n  //   } catch(error) {\r\n  //     setPostErrorMsg((error as any).response.data.message);\r\n  //   }\r\n  // }, [onCloseDeletePostCommentModal]);\r\n\r\n  // const onLikePost = useCallback(async(postId: string): Promise<void> => {\r\n  //   const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n  //   try {\r\n  //     const { data } = await axiosPost.post(\"/like\", {postId}, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`\r\n  //       }\r\n  //     });\r\n  //     console.log(data);\r\n      \r\n\r\n  //     setPost(prev => {\r\n  //       if(!prev) return prev;\r\n  //       return {\r\n  //         ...prev,\r\n  //         likes: [\r\n  //           data.userLiked,\r\n  //           ...prev.likes\r\n  //         ]\r\n  //       };\r\n  //     });\r\n  //   } catch(error) {\r\n  //     setPostErrorMsg((error as any).response.data.message);\r\n  //   }\r\n  // }, []);\r\n\r\n  // const onUnlikePost = useCallback(async(postId: string): Promise<void> => {\r\n  //   const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n  //   try {\r\n  //     const { data } = await axiosPost.post(\"/unlike\", {postId}, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`\r\n  //       }\r\n  //     });\r\n\r\n  //     setPost(prev => {\r\n  //       if(!prev) return prev;\r\n  //       return {\r\n  //         ...prev,\r\n  //         likes: prev.likes.filter(like => like._id !== data.userUnlikedId)\r\n  //       };\r\n  //     });\r\n  //   } catch(error) {\r\n  //     setPostErrorMsg((error as any).response.data.message);\r\n  //   }\r\n  // }, []);\r\n\r\n  // const onLikePostComment = useCallback(async(postId: string, commentId: string): Promise<void> => {\r\n  //   const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n  //   try {\r\n  //     const { data } = await axiosPost.post(\"/comment/like\", {postId, commentId}, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`\r\n  //       }\r\n  //     });\r\n  //     setPost(prev => {\r\n  //       if(!prev) return prev;\r\n\r\n  //       const targetCommentIndex = prev.comments.findIndex(comment => comment._id === commentId);\r\n  //       if(targetCommentIndex < 0) return prev;\r\n\r\n  //       const copiedComments = [...prev.comments];\r\n  //       copiedComments[targetCommentIndex].likes.unshift(data.userLiked);\r\n\r\n  //       return {\r\n  //         ...prev,\r\n  //         comments: copiedComments\r\n  //       };\r\n  //     });\r\n  //   } catch(error) {\r\n  //     setPostErrorMsg((error as any).response.data.message);\r\n  //   }\r\n  // }, []);\r\n\r\n  // const onUnlikePostComment = useCallback(async(_: string, commentId: string): Promise<void> => {\r\n  //   const token = localStorage.getItem(\"socNetAppToken\");\r\n\r\n  //   try {\r\n  //     const { data } = await axiosPost.post(\"/comment/unlike\", {commentId}, {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`\r\n  //       }\r\n  //     });\r\n  //     setPost(prev => {\r\n  //       if(!prev) return prev;\r\n\r\n  //       const targetCommentIndex = prev.comments.findIndex(comment => comment._id === commentId);\r\n  //       if(targetCommentIndex < 0) return prev;\r\n\r\n  //       const copiedComments = [...prev.comments];\r\n\r\n  //       const newCommentLikes = copiedComments[targetCommentIndex].likes.filter(like => like._id !== data.userUnlikedId);\r\n  //       copiedComments[targetCommentIndex].likes = newCommentLikes;\r\n\r\n  //       return {\r\n  //         ...prev,\r\n  //         comments: copiedComments\r\n  //       };\r\n  //     });\r\n  //   } catch(error) {\r\n  //     setPostErrorMsg((error as any).response.data.message);\r\n  //   }\r\n  // }, []);\r\n\r\n  return (\r\n    <>\r\n      {(postErrorMsg !== null || postsErrorMsg !== null) && (\r\n        <DefaultModal\r\n          show={postErrorMsg !== null || postsErrorMsg !== null}\r\n          isErrorModal={true}\r\n          title=\"Error occured\"\r\n          text={\r\n            postErrorMsg ? postErrorMsg : postsErrorMsg ? postsErrorMsg : \"Error unknown\"\r\n          }\r\n          onClose={\r\n            postErrorMsg\r\n            ? clearPostErrorMsg\r\n            : postsErrorMsg\r\n            ? onClearPostsError\r\n            : () => {return}\r\n          }>\r\n          <ModalBtn\r\n            btnType=\"button\"\r\n            btnCustomType=\"btn__ok\"\r\n            btnText=\"ok\"\r\n            onClick={\r\n              postErrorMsg\r\n              ? clearPostErrorMsg\r\n              : postsErrorMsg\r\n              ? onClearPostsError\r\n              : () => {return}\r\n            } />\r\n        </DefaultModal>\r\n      )}\r\n      {((deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null) || postToDeleteId !== null) && (\r\n        <DefaultModal\r\n          show={((deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null) || postToDeleteId !== null)}\r\n          isErrorModal={false}\r\n          title=\"Prepairing to delete comment\"\r\n          text=\"Are you sure you want to delete this post's comment?\"\r\n          onClose={\r\n            deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null\r\n            ? onCloseDeletePostCommentModal\r\n            : postToDeleteId !== null\r\n            ? onCancelDeletePost\r\n            : () => {return}\r\n          }>\r\n          <ModalBtn\r\n            btnType=\"button\"\r\n            btnCustomType=\"btn__cancel\"\r\n            btnText=\"cancel\"\r\n            onClick={\r\n              deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null\r\n              ? onCloseDeletePostCommentModal\r\n              : postToDeleteId !== null\r\n              ? onCancelDeletePost\r\n              : () => {return}\r\n            } />\r\n          <ModalBtn\r\n            btnType=\"button\"\r\n            btnCustomType=\"btn__confirm\"\r\n            btnText=\"delete\"\r\n            onClick={\r\n              deleteCommentInfo.postId !== null && deleteCommentInfo.commentId !== null\r\n              ? deletePostComment\r\n              : postToDeleteId !== null\r\n              ? onDeletePost\r\n              : () => {return}\r\n            } />\r\n        </DefaultModal>\r\n      )}\r\n      <main style={{margin: \"2rem 0\"}}>\r\n        {\r\n          postsLoading\r\n          ? <Spinner />\r\n          : posts === null || posts.length === 0\r\n          ? <p style={{textAlign: \"center\", fontSize: \"2rem\"}}>No post found</p>\r\n          : (\r\n            <SinglePost\r\n              post={posts[0]}\r\n              highlightedCommentId={highlightedCommentId}\r\n              onCommentOnPost={onCommentOnPost}\r\n              onLikePost={onLikePost}\r\n              onUnlikePost={onUnlikePost}\r\n              onLikePostComment={onLikePostComment}\r\n              onUnlikePostComment={onUnlikePostComment}\r\n              onPrepareDeletePostComment={onPrepareDeletePostComment}\r\n              onPrepareDeletePost={onPrepareDeletePost} />\r\n          )\r\n        }\r\n        {/* {\r\n          postsLoading\r\n          ? <Spinner />\r\n          : !postsLoading && posts.length > 0 && (\r\n            <SinglePost\r\n              post={posts[0]}\r\n              highlightedCommentId={highlightedCommentId}\r\n              onCommentOnPost={onCommentOnPost}\r\n              onLikePost={onLikePost}\r\n              onUnlikePost={onUnlikePost}\r\n              onLikePostComment={onLikePostComment}\r\n              onUnlikePostComment={onUnlikePostComment}\r\n              onPrepareDeletePostComment={onPrepareDeletePostComment}\r\n              onPrepareDeletePost={onPrepareDeletePost} />\r\n          )\r\n        } */}\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SinglePostPage;"],"names":["postId","useParams","_usePosts","usePosts","postsLoading","postsErrorMsg","postToDeleteId","posts","onClearPostsError","onGetPosts","onPrepareDeletePost","onCancelDeletePost","onDeletePost","onLikePost","onUnlikePost","onCommentOnPost","onDeletePostComment","onLikePostComment","onUnlikePostComment","location","useLocation","_useState","useState","_useState2","_slicedToArray","postErrorMsg","setPostErrorMsg","_useState3","commentId","_useState4","deleteCommentInfo","setDeleteCommentInfo","_useState5","_useState6","highlightedCommentId","setHighlightedCommentId","useEffect","state","window","history","replaceState","document","title","concat","clearPostErrorMsg","useCallback","onCloseDeletePostCommentModal","onPrepareDeletePostComment","deletePostComment","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","_jsxs","_Fragment","children","_jsx","DefaultModal","show","isErrorModal","text","onClose","ModalBtn","btnType","btnCustomType","btnText","onClick","style","margin","Spinner","length","textAlign","fontSize","SinglePost","post"],"sourceRoot":""}