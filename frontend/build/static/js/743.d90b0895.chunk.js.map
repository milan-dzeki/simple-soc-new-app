{"version":3,"file":"static/js/743.d90b0895.chunk.js","mappings":"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","sources":["webpack://frontend/./src/styles/components/inputs/multiphotoWthDescriptionsInput.module.scss?a526","components/Inputs/MultiphotoWithDescriptionsInput.tsx","webpack://frontend/./src/styles/components/modals/createPostModal.module.scss?d301","components/Modals/CreatePostModal.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"multiphotoWthDescriptionsInput_input__5TttL\",\"input__label\":\"multiphotoWthDescriptionsInput_input__label__+qane\",\"input__label_icon\":\"multiphotoWthDescriptionsInput_input__label_icon__LZhcY\",\"input__label_text\":\"multiphotoWthDescriptionsInput_input__label_text__txn8W\",\"input__previews\":\"multiphotoWthDescriptionsInput_input__previews__ZMPYB\",\"input__previews_title\":\"multiphotoWthDescriptionsInput_input__previews_title__6m4v-\",\"input__previews_list\":\"multiphotoWthDescriptionsInput_input__previews_list__8lFba\",\"input__preview\":\"multiphotoWthDescriptionsInput_input__preview__HhZSx\",\"input__preview_img\":\"multiphotoWthDescriptionsInput_input__preview_img__7slHG\",\"input__preview_desc\":\"multiphotoWthDescriptionsInput_input__preview_desc__ImiMP\",\"input__preview_desc_label\":\"multiphotoWthDescriptionsInput_input__preview_desc_label__zsDTz\"};","import { FC, ChangeEventHandler, ChangeEvent, memo } from 'react';\r\nimport styles from '../../styles/components/inputs/multiphotoWthDescriptionsInput.module.scss';\r\nimport CloseBtn from '../Buttons/CloseBtn';\r\n\r\ninterface Props {\r\n  filePreviews: string[];\r\n  descriptions: string[];\r\n  onChange: ChangeEventHandler<HTMLInputElement>;\r\n  onInputDescriptionChanged: (event: ChangeEvent<HTMLInputElement>, descIndex: number) => void;\r\n  onRemoveSinglePhotoForUpload: (photoIndex: number) => void;\r\n}\r\n\r\nconst MultiphotoWithDescriptionsInput: FC<Props> = (props) => {\r\n  return (\r\n    <div className={styles.input}>\r\n      <label htmlFor=\"photos\" className={styles.input__label}>\r\n        <span className={styles.input__label_icon}>\r\n          <svg stroke=\"currentColor\" fill=\"none\" strokeWidth=\"2\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"></path></svg>\r\n        </span>\r\n        <span className={styles.input__label_text}>\r\n          Add Photos\r\n        </span>\r\n        <input \r\n          type=\"file\"\r\n          id=\"photos\"\r\n          name=\"photos\"\r\n          multiple\r\n          accept=\"image/*\"\r\n          onChange={props.onChange} />\r\n      </label>\r\n      {\r\n        props.filePreviews.length > 0 && (\r\n          <div className={styles.input__previews}>\r\n            <p className={styles.input__previews_title}>\r\n              Photos ready to go\r\n            </p>\r\n            <div className={styles.input__previews_list}>\r\n              {props.filePreviews.map((photo, i) => {\r\n                return (\r\n                  <div\r\n                    key={photo}\r\n                    className={styles.input__preview}>\r\n                    <CloseBtn\r\n                      size=\"btn__small\"\r\n                      position=\"btn__absolute\"\r\n                      onClick={() => props.onRemoveSinglePhotoForUpload(i)} />\r\n                    <div className={styles.input__preview_img}>\r\n                      <img src={photo} alt=\"photoPreview\" />\r\n                    </div>\r\n                    <div className={styles.input__preview_desc}>\r\n                      <label htmlFor={`desc_${i}`} className={styles.input__preview_desc_label}>\r\n                        photo {i + 1} description:\r\n                      </label>\r\n                      <input \r\n                        type=\"text\"\r\n                        value={props.descriptions[i] || \"\"}\r\n                        onChange={(event) => props.onInputDescriptionChanged(event, i)} />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(MultiphotoWithDescriptionsInput);","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"createPostModal_modal__QnfJ8\",\"modalAppear\":\"createPostModal_modalAppear__xO7Hg\",\"modal__content\":\"createPostModal_modal__content__+z48z\",\"modal__form\":\"createPostModal_modal__form__jL2xR\",\"modal__tagg\":\"createPostModal_modal__tagg__oI8hN\",\"modal__tagg_icon\":\"createPostModal_modal__tagg_icon__jD7r5\",\"modal__tagg_text\":\"createPostModal_modal__tagg_text__5wlG8\",\"modal__tagged\":\"createPostModal_modal__tagged__65hv+\",\"modal__tagged_title\":\"createPostModal_modal__tagged_title__AwPL-\",\"modal__tagged_list\":\"createPostModal_modal__tagged_list__CgBd7\",\"modal__tagged_friend\":\"createPostModal_modal__tagged_friend__vXOsh\",\"modal__tagged_friend_name\":\"createPostModal_modal__tagged_friend_name__ds39n\",\"modal__btns\":\"createPostModal_modal__btns__1wxRG\"};","import { FC, FormEventHandler, ChangeEvent, ChangeEventHandler, lazy, memo, useState, useCallback } from 'react';\r\nimport styles from '../../styles/components/modals/createPostModal.module.scss';\r\nimport ReactDOM from 'react-dom';\r\n// types\r\nimport { IInput } from '../../types/formsAndInputs/inputType';\r\nimport { IFriend } from '../../store/types/friendsTypes';\r\n// components\r\nimport Backdrop from '../Shared/Backdrop';\r\nimport CloseBtn from '../Buttons/CloseBtn';\r\nimport ModalBtn from '../Buttons/ModalBtn';\r\nimport Input from '../Inputs/Input';\r\nimport ModalTitle from './ModalTitle';\r\nimport MultiphotoWithDescriptionsInput from '../Inputs/MultiphotoWithDescriptionsInput';\r\nimport TaggFriendsModal from './TaggFriendsModal';\r\nimport Spinner from '../Shared/Spinner';\r\n\r\nconst TaggedFriend = lazy(() => import('../Friends/TaggedFriend'));\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  loading: boolean;\r\n  postTextInput: {[group: string]: IInput};\r\n  photoFiles: File[];\r\n  photoPreviews: string[];\r\n  photoDescriptions: string[];\r\n  postTaggs: {\r\n    userId: string;\r\n    userFullName: string;\r\n  }[];\r\n  onAddPostTaggs: (friends: IFriend[], checked: {[name: string]: boolean}) => void;\r\n  onUploadPostPhotos: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\r\n  onInputDescriptionChanged: (event: ChangeEvent<HTMLInputElement>, descIndex: number) => void;\r\n  onRemoveSinglePhotoForUpload: (photoIndex: number) => void;\r\n  onRemoveSingleTagg: (userId: string) => void;\r\n  onPostTextInputFocused: () => void;\r\n  onPostTextInputUnfocused: () => void;\r\n  onPostTextInputChanged: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, inputGroup: string) => void;\r\n  onClose: () => void;\r\n  onCreatePost: FormEventHandler<HTMLFormElement>;\r\n}\r\n\r\nconst CreatePostModal: FC<Props> = (props) => {\r\n  const { onAddPostTaggs } = props;\r\n  const [taggFriendsShow, setTaggFriendsShow] = useState(false);\r\n\r\n  const onCloseTaggFriendsModal = useCallback((): void => {\r\n    setTaggFriendsShow(false);\r\n  }, []);\r\n\r\n  const onSetTaggs = useCallback((friends: IFriend[], checked: {[name: string]: boolean}): void => {\r\n    onAddPostTaggs(friends, checked);\r\n    setTaggFriendsShow(false);\r\n  }, [onAddPostTaggs]);\r\n  \r\n  if(taggFriendsShow) return (\r\n    <TaggFriendsModal\r\n      show={taggFriendsShow}\r\n      taggs={props.postTaggs}\r\n      onSetTaggs={onSetTaggs}\r\n      onClose={onCloseTaggFriendsModal} />\r\n  );\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <Backdrop\r\n        show={props.show}\r\n        bcgColor=\"dark\"\r\n        onClose={props.onClose} />\r\n      <div className={styles.modal}>\r\n        <div className={styles.modal__content}>\r\n          <ModalTitle\r\n            text=\"Create Post\"\r\n            onClose={props.onClose}\r\n            loading={props.loading} />\r\n          <form \r\n            className={styles.modal__form}\r\n            onSubmit={props.onCreatePost}>\r\n            {\r\n              props.loading\r\n              ? <Spinner />\r\n              : (\r\n                <>\r\n                  <div className={styles.modal__inputs}>\r\n                    <Input\r\n                      {...props.postTextInput.postText}\r\n                      inputGroup=\"none\"\r\n                      onInputFocus={props.onPostTextInputFocused}\r\n                      onInputUnfocus={props.onPostTextInputUnfocused}\r\n                      onInputChange={props.onPostTextInputChanged} />\r\n                    <MultiphotoWithDescriptionsInput\r\n                      filePreviews={props.photoPreviews}\r\n                      descriptions={props.photoDescriptions}\r\n                      onChange={props.onUploadPostPhotos}\r\n                      onInputDescriptionChanged={props.onInputDescriptionChanged}\r\n                      onRemoveSinglePhotoForUpload={props.onRemoveSinglePhotoForUpload} />\r\n                    <div \r\n                      className={styles.modal__tagg}\r\n                      onClick={() => setTaggFriendsShow(true)}>\r\n                      <span className={styles.modal__tagg_icon}>\r\n                        <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 16 16\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0Zm-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\"></path><path d=\"M8.256 14a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z\"></path></svg>\r\n                      </span>\r\n                      <span className={styles.modal__tagg_text}>\r\n                        Tagg Friends\r\n                      </span>\r\n                    </div>\r\n                    {\r\n                      props.postTaggs.length > 0 && (\r\n                        <div className={styles.modal__tagged}>\r\n                          <p className={styles.modal__tagged_title}>\r\n                            Tagged Friends\r\n                          </p>\r\n                          <div className={styles.modal__tagged_list}>\r\n                            {props.postTaggs.map(friend => {\r\n                              return (\r\n                                <TaggedFriend\r\n                                  key={friend.userId}\r\n                                  name={friend.userFullName}\r\n                                  onRemove={() => props.onRemoveSingleTagg(friend.userId)} />\r\n                              );\r\n                            })}\r\n                          </div>\r\n                        </div>\r\n                      )\r\n                    }\r\n                  </div>\r\n                  <div className={styles.modal__btns}>\r\n                    <ModalBtn\r\n                      btnType=\"button\"\r\n                      btnCustomType=\"btn__cancel\"\r\n                      btnText=\"cancel\"\r\n                      onClick={props.onClose} />\r\n                    <ModalBtn\r\n                      btnType=\"submit\"\r\n                      btnCustomType=\"btn__confirm\"\r\n                      btnText=\"create\"\r\n                      disabled={props.postTextInput.postText.value.trim().length === 0 && props.photoFiles.length === 0 && props.postTaggs.length === 0} />\r\n                  </div>\r\n                </>\r\n              )\r\n            }\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>,\r\n    document.getElementById(\"modal\") as HTMLDivElement\r\n  );\r\n};\r\n\r\nexport default memo(CreatePostModal);"],"names":["MultiphotoWithDescriptionsInput","props","_jsxs","className","styles","children","htmlFor","_jsx","stroke","fill","strokeWidth","viewBox","height","width","xmlns","strokeLinecap","strokeLinejoin","d","type","id","name","multiple","accept","onChange","filePreviews","length","map","photo","i","CloseBtn","size","position","onClick","onRemoveSinglePhotoForUpload","src","alt","concat","value","descriptions","event","onInputDescriptionChanged","memo","TaggedFriend","lazy","CreatePostModal","onAddPostTaggs","_useState","useState","_useState2","_slicedToArray","taggFriendsShow","setTaggFriendsShow","onCloseTaggFriendsModal","useCallback","onSetTaggs","friends","checked","TaggFriendsModal","show","taggs","postTaggs","onClose","ReactDOM","_Fragment","Backdrop","bcgColor","ModalTitle","text","loading","onSubmit","onCreatePost","Spinner","Input","_objectSpread","postTextInput","postText","inputGroup","onInputFocus","onPostTextInputFocused","onInputUnfocus","onPostTextInputUnfocused","onInputChange","onPostTextInputChanged","photoPreviews","photoDescriptions","onUploadPostPhotos","friend","userFullName","onRemove","onRemoveSingleTagg","userId","ModalBtn","btnType","btnCustomType","btnText","disabled","trim","photoFiles","document","getElementById"],"sourceRoot":""}